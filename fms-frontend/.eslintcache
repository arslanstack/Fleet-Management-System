[{"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\index.js":"1","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\i18n.js":"2","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\App.js":"3","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\polyfill.js":"4","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\serviceWorker.js":"5","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\store.js":"6","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_components\\AnonymousRoute.jsx":"7","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_components\\AuthenticatedRoute.jsx":"8","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultLayout.js":"9","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Anonymous\\Login\\Login.js":"10","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\index.js":"11","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\api.service.js":"12","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultAside.js":"13","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultFooter.js":"14","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultHeader.js":"15","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\routes.js":"16","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_nav.js":"17","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\translation-i18.js":"18","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\auth-header.js":"19","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\history.js":"20","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\admin.actions.js":"21","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\fake-backend.js":"22","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\index.js":"23","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\admin.service.js":"24","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotificationManage.js":"25","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotification.js":"26","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\admin.constants.js":"27","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\alert.reducer.js":"28","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\userCustomNotification.reducer.js":"29","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\users.reducer.js":"30","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\admins.reducer.js":"31","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\authentication.reducer.js":"32","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_config\\index.js":"33","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\index.js":"34","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\views\\Dashboard\\Dashboard.js":"35","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\RideEarnings\\index.js":"36","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\DistributeProfit\\index.js":"37","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\userCustomNotification.actions.js":"38","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\user.service.js":"39","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_common\\notification.js":"40","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_common\\field.js":"41","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\settings.service.js":"42","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\alert.constants.js":"43","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\userCustomNotification.constants.js":"44","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\user.constants.js":"45","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\alert.actions.js":"46","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\dashboard.service.js":"47","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\userCustomNotification.service.js":"48","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\views\\Widgets\\Widget03.js":"49","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotifications.js":"50","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\adminNotification.service.js":"51","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\Admin\\AdminManage.js":"52","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\CRUD\\index.js":"53","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\imageHelper.js":"54","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\RTEField.js":"55","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ParentCheckList.js":"56","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ParentDropDown.js":"57","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ImageUploader.js":"58","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\AddressLocationField\\GoogleMapComponent.js":"59","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\AddressLocationField\\index.js":"60","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\PasswordField\\index.js":"61","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\MultipleImageUploader\\index.js":"62","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\Drivers\\Drivers.js":"63"},{"size":706,"mtime":1623179367000,"results":"64","hashOfConfig":"65"},{"size":1626,"mtime":1623179367000,"results":"66","hashOfConfig":"65"},{"size":2615,"mtime":1692348507124,"results":"67","hashOfConfig":"65"},{"size":1398,"mtime":1623179367000,"results":"68","hashOfConfig":"65"},{"size":4686,"mtime":1623179367000,"results":"69","hashOfConfig":"65"},{"size":364,"mtime":1623179367000,"results":"70","hashOfConfig":"65"},{"size":406,"mtime":1623179367000,"results":"71","hashOfConfig":"65"},{"size":433,"mtime":1694178422665,"results":"72","hashOfConfig":"65"},{"size":3163,"mtime":1623179367000,"results":"73","hashOfConfig":"65"},{"size":4482,"mtime":1694076937584,"results":"74","hashOfConfig":"65"},{"size":148,"mtime":1623179367000,"results":"75","hashOfConfig":"65"},{"size":1824,"mtime":1623179367000,"results":"76","hashOfConfig":"65"},{"size":19371,"mtime":1623179367000,"results":"77","hashOfConfig":"65"},{"size":658,"mtime":1694074483756,"results":"78","hashOfConfig":"65"},{"size":6388,"mtime":1692344074531,"results":"79","hashOfConfig":"65"},{"size":7278,"mtime":1694152153180,"results":"80","hashOfConfig":"65"},{"size":3388,"mtime":1694076494015,"results":"81","hashOfConfig":"65"},{"size":129,"mtime":1623179367000,"results":"82","hashOfConfig":"65"},{"size":299,"mtime":1623179367000,"results":"83","hashOfConfig":"65"},{"size":95,"mtime":1623179367000,"results":"84","hashOfConfig":"65"},{"size":2412,"mtime":1694074464162,"results":"85","hashOfConfig":"65"},{"size":2537,"mtime":1623179367000,"results":"86","hashOfConfig":"65"},{"size":445,"mtime":1623179367000,"results":"87","hashOfConfig":"65"},{"size":2680,"mtime":1623179367000,"results":"88","hashOfConfig":"65"},{"size":12256,"mtime":1623179367000,"results":"89","hashOfConfig":"65"},{"size":4919,"mtime":1623179367000,"results":"90","hashOfConfig":"65"},{"size":363,"mtime":1623179367000,"results":"91","hashOfConfig":"65"},{"size":457,"mtime":1623179367000,"results":"92","hashOfConfig":"65"},{"size":1630,"mtime":1623179367000,"results":"93","hashOfConfig":"65"},{"size":971,"mtime":1623179367000,"results":"94","hashOfConfig":"65"},{"size":443,"mtime":1623179367000,"results":"95","hashOfConfig":"65"},{"size":929,"mtime":1623179367000,"results":"96","hashOfConfig":"65"},{"size":258,"mtime":1694159515238,"results":"97","hashOfConfig":"65"},{"size":33,"mtime":1623179367000,"results":"98","hashOfConfig":"65"},{"size":39319,"mtime":1694094033652,"results":"99","hashOfConfig":"65"},{"size":6739,"mtime":1623179367000,"results":"100","hashOfConfig":"65"},{"size":5065,"mtime":1623179367000,"results":"101","hashOfConfig":"65"},{"size":4169,"mtime":1623179367000,"results":"102","hashOfConfig":"65"},{"size":2604,"mtime":1623179367000,"results":"103","hashOfConfig":"65"},{"size":405,"mtime":1623179367000,"results":"104","hashOfConfig":"65"},{"size":440,"mtime":1623179367000,"results":"105","hashOfConfig":"65"},{"size":655,"mtime":1623179367000,"results":"106","hashOfConfig":"65"},{"size":116,"mtime":1623179367000,"results":"107","hashOfConfig":"65"},{"size":1016,"mtime":1623179367000,"results":"108","hashOfConfig":"65"},{"size":474,"mtime":1623179367000,"results":"109","hashOfConfig":"65"},{"size":388,"mtime":1623179367000,"results":"110","hashOfConfig":"65"},{"size":12560,"mtime":1623179367000,"results":"111","hashOfConfig":"65"},{"size":1173,"mtime":1623179367000,"results":"112","hashOfConfig":"65"},{"size":1848,"mtime":1623179367000,"results":"113","hashOfConfig":"65"},{"size":6935,"mtime":1694172944751,"results":"114","hashOfConfig":"65"},{"size":1847,"mtime":1623179367000,"results":"115","hashOfConfig":"65"},{"size":11857,"mtime":1623179367000,"results":"116","hashOfConfig":"65"},{"size":38596,"mtime":1623179367000,"results":"117","hashOfConfig":"65"},{"size":290,"mtime":1623179367000,"results":"118","hashOfConfig":"65"},{"size":972,"mtime":1623179367000,"results":"119","hashOfConfig":"65"},{"size":3136,"mtime":1623179367000,"results":"120","hashOfConfig":"65"},{"size":4316,"mtime":1623179367000,"results":"121","hashOfConfig":"65"},{"size":4529,"mtime":1623179367000,"results":"122","hashOfConfig":"65"},{"size":182,"mtime":1623179367000,"results":"123","hashOfConfig":"65"},{"size":3891,"mtime":1623179367000,"results":"124","hashOfConfig":"65"},{"size":1252,"mtime":1623179367000,"results":"125","hashOfConfig":"65"},{"size":4267,"mtime":1623179367000,"results":"126","hashOfConfig":"65"},{"size":4242,"mtime":1694088964707,"results":"127","hashOfConfig":"65"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},"uw0oym",{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"130"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"130"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"153","messages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"130"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"130"},{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"130"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"130"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"130"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"130"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"130"},{"filePath":"180","messages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"182","messages":"183","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"184","messages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"130"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"130"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"130"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"130"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"130"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"237"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"130"},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"251","usedDeprecatedRules":"130"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"130"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"130"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"130"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"130"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"130"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277","usedDeprecatedRules":"130"},"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\index.js",[],["278","279"],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\i18n.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\App.js",["280","281","282","283"],"import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch, Router } from \"react-router-dom\";\nimport \"@coreui/icons/css/coreui-icons.css\"\nimport \"flag-icon-css/css/flag-icon.min.css\"\nimport \"font-awesome/css/font-awesome.min.css\"\nimport \"simple-line-icons/css/simple-line-icons.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@coreui/coreui/dist/css/coreui.min.css'\n// import { renderRoutes } from 'react-router-config';\n// import \"./App.scss\";\nimport { AnonymousRoute } from \"./_components/AnonymousRoute\";\nimport { AuthenticatedRoute } from \"./_components/AuthenticatedRoute\";\n\nimport { Provider } from \"react-redux\";\nimport { store } from \"./_helpers/store\";\nimport { DefaultLayout } from \"./containers/DefaultLayout/DefaultLayout\";\nimport { history } from \"./_helpers\";\n// import Translation from './_helpers/translation-i18';\nimport { useTranslation } from 'react-i18next';\nimport { Login } from \"./_pages/Anonymous/Login/Login\";\n\nconst loading = () => (\n  <div className=\"animated fadeIn pt-3 text-center\">Loading...</div>\n);\n\n// Containers\n// const DefaultLayout = React.lazy(() => import('./containers/DefaultLayout'));\n\n// Pages\n// const Login = React.lazy(() => import('./views/Pages/Login'));\n// const Register = React.lazy(() => import('./views/Pages/Register'));\n// const Page404 = React.lazy(() => import('./views/Pages/Page404'));\n// const Page500 = React.lazy(() => import('./views/Pages/Page500'));\n\nfunction App() {\n  const { t } = useTranslation();\n  return (\n    <Provider store={store}>\n      <HashRouter history={history}>\n        {/* <Router history={history}> */}\n        <React.Suspense fallback={loading()}>\n          <Switch>\n            <AnonymousRoute\n              path=\"/login\"\n              name=\"Login Page\"\n              component={Login}\n            />\n            {/* <Route exact path=\"/login\" name=\"Login Page\" render={props => <Login {...props}/>} /> */}\n            {/* <Route exact path=\"/register\" name=\"Register Page\" render={props => <Register {...props}/>} /> */}\n            {/* <Route exact path=\"/404\" name=\"Page 404\" render={props => <Page404 {...props} />} />\n            <Route exact path=\"/500\" name=\"Page 500\" render={props => <Page500 {...props} />} /> */}\n            <AuthenticatedRoute\n              path=\"/\"\n              name=\"Admin\"\n              component={DefaultLayout}\n            />\n\n\n            {/* <Route path=\"/\" name=\"Home\" render={props => <DefaultLayout {...props} />} /> */}\n          </Switch>\n        </React.Suspense>\n        {/* </Router> */} \n      </HashRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\polyfill.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\serviceWorker.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\store.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_components\\AnonymousRoute.jsx",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_components\\AuthenticatedRoute.jsx",["284"],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultLayout.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Anonymous\\Login\\Login.js",["285","286","287","288"],"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardGroup,\n  Col,\n  Container,\n  Form,\n  Input,\n  InputGroup,\n  Row\n} from \"reactstrap\";\nimport { adminActions } from \"../../../_actions/admin.actions\";\nimport \"./Login.css\";\nimport { withRouter,useHistory } from \"react-router-dom\";\nimport { apiService } from \"../../../_services/api.service\";\nimport sygnet from './../../../assets/img/brand/sygnet.png';\n\nconst Login =()=>{\nconst history = useHistory()\nconst handleSubmit = (e)=>{\n  e.preventDefault()\n  history.push(\"/\")\n}\n\n\n    return (\n      <div className=\"app flex-row align-items-center login-bg\">\n        <Container>\n          <Row className=\"justify-content-center\">\n            <Col md=\"5\">\n              <CardGroup>\n                <Card className=\"p-4\">\n                  <CardBody>\n                    <Form onSubmit={handleSubmit}>\n                      <div className=\"text-center\">\n                        {<img src={sygnet} />}\n\n                        <div className=\"mt-4\">\n                          <p className=\"text-muted\">Sign In to your account</p>\n                        </div>\n                      </div>\n\n                      {alert.message && (\n                        <div className={`alert ${alert.type}`}>\n                          {alert.message}\n                        </div>\n                      )}\n                      <InputGroup className=\"mb-3\">\n                        {/* <InputGroupAddon addonType=\"prepend\">\n                          <InputGroupText>\n                            <i className=\"icon-user\"></i>\n                          </InputGroupText>\n                        </InputGroupAddon> */}\n                        <Input\n                          type=\"text\"\n                          className=\"login-input\"\n                          placeholder=\"Email\"\n                          autoComplete=\"email\"\n                          name=\"email\"\n                        \n                        />\n                      </InputGroup>\n                    \n                      <InputGroup className=\"mb-4\">\n                        {/* <InputGroupAddon addonType=\"prepend\">\n                          <InputGroupText>\n                            <i className=\"icon-lock\"></i>\n                          </InputGroupText>\n                        </InputGroupAddon> */}\n                        <Input\n                          type=\"password\"\n                          className=\"login-input\"\n                          placeholder=\"Password\"\n                          autoComplete=\"current-password\"\n                          name=\"password\"\n                        \n                        />\n                      </InputGroup>\n                  \n                      <Row>\n                        <Col xs=\"12\">\n                          <Button\n                            color=\"secondary\"\n                            className=\"btn-block btn-login\"\n                          >\n                            <strong>Login</strong>\n                         \n                          </Button>\n                        </Col>\n                        {/* <Col xs=\"6\" className=\"text-right\">\n                          <Button color=\"link\" className=\"px-0\">Forgot password?</Button>\n                        </Col> */}\n                      </Row>\n                    </Form>\n                  </CardBody>\n                </Card>\n                {/* <Card className=\"text-white bg-primary py-5 d-md-down-none\" style={{ width: '44%' }}>\n                  <CardBody className=\"text-center\">\n                    <div>\n                      <h2>Sign up</h2>\n                      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut\n                        labore et dolore magna aliqua.</p>\n                      <Link to=\"/register\">\n                        <Button color=\"primary\" className=\"mt-3\" active tabIndex={-1}>Register Now!</Button>\n                      </Link>\n                    </div>\n                  </CardBody>\n                </Card> */}\n              </CardGroup>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n\n\nfunction mapStateToProps(state) {\n  const { loggingIn } = state.authentication;\n  const { alert } = state;\n  return {\n    loggingIn,\n    alert\n  };\n}\n\nconst connectedLogin = connect(mapStateToProps)(withRouter(Login));\nexport { connectedLogin as Login };\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\index.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\api.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultAside.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303"],"import React, { Component } from 'react';\nimport { Nav, NavItem, NavLink, Progress, TabContent, TabPane, ListGroup, ListGroupItem } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport './DefaultAside.css'\nimport { adminNotificationService } from '../../_services/adminNotification.service';\nimport config from '../../_config';\nimport io from 'socket.io-client';\nimport { Link } from \"react-router-dom\";\nimport { AppSwitch } from '@coreui/react'\nlet image = \"https://task-co-trade.web.app/favicons/favicon.png\";\nconst propTypes = {\n  children: PropTypes.node,\n};\nArray.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\nconst defaultProps = {};\nfunction NotificationComponent(props) {\n  let { icon, iconType, title, body, dateTime, navigation, from } = props.notification;\n  return (\n    <div>\n      <div className=\"message notification-message\">\n        <Link to={navigation} onClick={() => {\n          if (window.location.pathname == navigation) {\n            window.location.reload()\n          }\n        }}>\n          <div className=\"py-3 pb-5 mr-3 float-left\">\n            <div className={`text-white notification-icon-circle notification-icon-circle-${iconType}`}>\n              <i className={`fa fa-${icon} notification-icon`}></i>\n            </div>\n          </div>\n          <div>\n            <small className=\"text-muted\">@{from}</small>\n            <small className=\"text-muted float-right mt-1\">{new Date(dateTime).toLocaleTimeString()}</small>\n          </div>\n          <div className=\"text-truncate font-weight-bold\">{title}</div>\n          <small className=\"text-muted\">\n            {body}\n          </small>\n        </Link>\n\n      </div>\n      <hr style={{ marginTop: 3, marginBottom: 3 }} />\n    </div>\n\n  )\n}\nclass DefaultAside extends Component {\n\n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '1',\n      notifications: []\n    };\n  }\n  componentDidMount() {\n    adminNotificationService.getAll().then(notifications => {\n      this.setState({ notifications })\n    })\n    let socket = io(config.baseUrl, config.socketHeader);\n    socket.on(\"new-adminnotification\", (m) => {\n      // let notifications = JSON.parse(JSON.stringify(this.state.notifications));\n      let notifications = this.state.notifications;\n      notifications.insert(0, m);\n      this.setState({ notifications });\n\n      // if (m.navigation.includes(\"adminnotified\")) {\n      this.sendPushNotification(m);\n      // }\n    });\n    socket.on(\"update-adminnotification\", (m) => {\n      // let notifications = JSON.parse(JSON.stringify(this.state.notifications));\n      let notifications = this.state.notifications;\n      let foundIndex = notifications.findIndex(n => n._id == m._id);\n      if (foundIndex != -1)\n        notifications[foundIndex] = m;\n      this.setState({ notifications });\n    });\n    socket.on(\"delete-adminnotification\", (m) => {\n      // let notifications = JSON.parse(JSON.stringify(this.state.notifications));\n      let notifications = this.state.notifications;\n      let foundIndex = notifications.findIndex(n => n._id == m);\n      if (foundIndex != -1)\n        notifications.splice(foundIndex, 1);\n      this.setState({ notifications });\n    });\n  }\n  sendPushNotification = (m) => {\n\n    debugger;\n    // Let's check if the browser supports notifications\n    if (!(\"Notification\" in window)) {\n      console.log(\"This browser does not support desktop notification\");\n    }\n\n    // Let's check whether notification permissions have already been granted\n    else if (Notification.permission === \"granted\") {\n      // If it's okay let's create a notification\n      sendNotification();\n    }\n\n    // Otherwise, we need to ask the user for permission\n    else if (Notification.permission !== \"denied\") {\n      Notification.requestPermission().then(function (permission) {\n        // If the user accepts, let's create a notification\n        if (permission === \"granted\") {\n          sendNotification();\n        }\n      });\n    }\n    function sendNotification() {\n      var notification = new Notification(m.title, { body: m.body, icon: image });\n      // setTimeout(() => {\n      //   notification.close();\n      // }, 5000)\n      notification.onclick = function (event) {\n        event.preventDefault();\n        console.log(window.location.origin);\n        window.open(window.location.origin + \"/#\" + m.navigation);\n        notification.close();\n      }\n    }\n\n  }\n\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab,\n      });\n    }\n  }\n\n  render() {\n\n    // eslint-disable-next-line\n    const { children, ...attributes } = this.props;\n\n    return (\n      <React.Fragment>\n        <div className=\"notification-container\">\n          {this.state.notifications.length > 0 ? this.state.notifications.map((notification, key) => <NotificationComponent notification={notification} key={key} />) :\n            <div className=\"message notification-message text-center\">\n              <span>No Notification</span>\n            </div>\n          }\n\n        </div>\n\n        {/* <Nav tabs>\n          <NavItem>\n            <NavLink className={classNames({ active: this.state.activeTab === '1' })}\n                     onClick={() => {\n                       this.toggle('1');\n                     }}>\n              <i className=\"icon-list\"></i>\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classNames({ active: this.state.activeTab === '2' })}\n                     onClick={() => {\n                       this.toggle('2');\n                     }}>\n              <i className=\"icon-speech\"></i>\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classNames({ active: this.state.activeTab === '3' })}\n                     onClick={() => {\n                       this.toggle('3');\n                     }}>\n              <i className=\"icon-settings\"></i>\n            </NavLink>\n          </NavItem>\n        </Nav> */}\n        {/* <TabContent activeTab={this.state.activeTab}> */}\n        {/* <TabPane tabId=\"1\">\n            <ListGroup className=\"list-group-accent\" tag={'div'}>\n              <ListGroupItem className=\"list-group-item-accent-secondary bg-light text-center font-weight-bold text-muted text-uppercase small\">Today</ListGroupItem>\n              <ListGroupItem action tag=\"a\" href=\"#\" className=\"list-group-item-accent-warning list-group-item-divider\">\n                <div className=\"avatar float-right\">\n                  <img className=\"img-avatar\" src=\"assets/img/avatars/7.jpg\" alt=\"admin@bootstrapmaster.com\"></img>\n                </div>\n                <div>Meeting with <strong>Lucas</strong> </div>\n                <small className=\"text-muted mr-3\">\n                  <i className=\"icon-calendar\"></i>&nbsp; 1 - 3pm\n                </small>\n                <small className=\"text-muted\">\n                  <i className=\"icon-location-pin\"></i> Palo Alto, CA\n                </small>\n              </ListGroupItem>\n              <ListGroupItem action tag=\"a\" href=\"#\" className=\"list-group-item-accent-info list-group-item-divider\">\n                <div className=\"avatar float-right\">\n                  <img className=\"img-avatar\" src=\"assets/img/avatars/4.jpg\" alt=\"admin@bootstrapmaster.com\"></img>\n                </div>\n                <div>Skype with <strong>Megan</strong></div>\n                <small className=\"text-muted mr-3\">\n                  <i className=\"icon-calendar\"></i>&nbsp; 4 - 5pm\n                </small>\n                <small className=\"text-muted\">\n                  <i className=\"icon-social-skype\"></i> On-line\n                </small>\n              </ListGroupItem>\n              <ListGroupItem className=\"list-group-item-accent-secondary bg-light text-center font-weight-bold text-muted text-uppercase small\">Tomorrow</ListGroupItem>\n              <ListGroupItem action tag=\"a\" href=\"#\" className=\"list-group-item-accent-danger list-group-item-divider\">\n                <div>New UI Project - <strong>deadline</strong></div>\n                <small className=\"text-muted mr-3\"><i className=\"icon-calendar\"></i>&nbsp; 10 - 11pm</small>\n                <small className=\"text-muted\"><i className=\"icon-home\"></i>&nbsp; All Rights Reserved HQ</small>\n                <div className=\"avatars-stack mt-2\">\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/2.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/3.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/4.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/5.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/6.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                </div>\n              </ListGroupItem>\n              <ListGroupItem action tag=\"a\" href=\"#\" className=\"list-group-item-accent-success list-group-item-divider\">\n                <div><strong>#10 Startups.Garden</strong> Meetup</div>\n                <small className=\"text-muted mr-3\"><i className=\"icon-calendar\"></i>&nbsp; 1 - 3pm</small>\n                <small className=\"text-muted\"><i className=\"icon-location-pin\"></i>&nbsp; Palo Alto, CA</small>\n              </ListGroupItem>\n              <ListGroupItem action tag=\"a\" href=\"#\" className=\"list-group-item-accent-primary list-group-item-divider\">\n                <div><strong>Team meeting</strong></div>\n                <small className=\"text-muted mr-3\"><i className=\"icon-calendar\"></i>&nbsp; 4 - 6pm</small>\n                <small className=\"text-muted\"><i className=\"icon-home\"></i>&nbsp; All Rights Reserved HQ</small>\n                <div className=\"avatars-stack mt-2\">\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/2.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/3.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/4.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/5.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/6.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                  <div className=\"avatar avatar-xs\">\n                    <img src={'assets/img/avatars/8.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  </div>\n                </div>\n              </ListGroupItem>\n            </ListGroup>\n          </TabPane>\n          <TabPane tabId=\"2\" className=\"p-3\">\n            <div className=\"message\">\n              <div className=\"py-3 pb-5 mr-3 float-left\">\n                <div className=\"avatar\">\n                  <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  <span className=\"avatar-status badge-success\"></span>\n                </div>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lukasz Holeczek</small>\n                <small className=\"text-muted float-right mt-1\">1:52 PM</small>\n              </div>\n              <div className=\"text-truncate font-weight-bold\">Lorem ipsum dolor sit amet</div>\n              <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt...\n              </small>\n            </div>\n            <hr />\n            <div className=\"message\">\n              <div className=\"py-3 pb-5 mr-3 float-left\">\n                <div className=\"avatar\">\n                  <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  <span className=\"avatar-status badge-success\"></span>\n                </div>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lukasz Holeczek</small>\n                <small className=\"text-muted float-right mt-1\">1:52 PM</small>\n              </div>\n              <div className=\"text-truncate font-weight-bold\">Lorem ipsum dolor sit amet</div>\n              <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt...\n              </small>\n            </div>\n            <hr />\n            <div className=\"message\">\n              <div className=\"py-3 pb-5 mr-3 float-left\">\n                <div className=\"avatar\">\n                  <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  <span className=\"avatar-status badge-success\"></span>\n                </div>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lukasz Holeczek</small>\n                <small className=\"text-muted float-right mt-1\">1:52 PM</small>\n              </div>\n              <div className=\"text-truncate font-weight-bold\">Lorem ipsum dolor sit amet</div>\n              <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt...\n              </small>\n            </div>\n            <hr />\n            <div className=\"message\">\n              <div className=\"py-3 pb-5 mr-3 float-left\">\n                <div className=\"avatar\">\n                  <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  <span className=\"avatar-status badge-success\"></span>\n                </div>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lukasz Holeczek</small>\n                <small className=\"text-muted float-right mt-1\">1:52 PM</small>\n              </div>\n              <div className=\"text-truncate font-weight-bold\">Lorem ipsum dolor sit amet</div>\n              <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt...\n              </small>\n            </div>\n            <hr />\n            <div className=\"message\">\n              <div className=\"py-3 pb-5 mr-3 float-left\">\n                <div className=\"avatar\">\n                  <img src={'assets/img/avatars/7.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                  <span className=\"avatar-status badge-success\"></span>\n                </div>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lukasz Holeczek</small>\n                <small className=\"text-muted float-right mt-1\">1:52 PM</small>\n              </div>\n              <div className=\"text-truncate font-weight-bold\">Lorem ipsum dolor sit amet</div>\n              <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                tempor incididunt...\n              </small>\n            </div>\n          </TabPane>\n          <TabPane tabId=\"3\" className=\"p-3\"> \n            <h6>Settings</h6>\n\n            <div className=\"aside-options\">\n              <div className=\"clearfix mt-4\">\n                <small><b>Option 1</b></small>\n                <AppSwitch className={'float-right'} variant={'pill'} label color={'success'} defaultChecked size={'sm'}/>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                  tempor incididunt ut labore et dolore magna aliqua.\n                </small>\n              </div>\n            </div>\n\n            <div className=\"aside-options\">\n              <div className=\"clearfix mt-3\">\n                <small><b>Option 2</b></small>\n                <AppSwitch className={'float-right'} variant={'pill'} label color={'success'} size={'sm'}/>\n              </div>\n              <div>\n                <small className=\"text-muted\">Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod\n                  tempor incididunt ut labore et dolore magna aliqua.\n                </small>\n              </div>\n            </div>\n\n            <div className=\"aside-options\">\n              <div className=\"clearfix mt-3\">\n                <small><b>Option 3</b></small>\n                <AppSwitch className={'float-right'} variant={'pill'} label color={'success'} defaultChecked size={'sm'} disabled/>\n                <div>\n                  <small className=\"text-muted\">Option disabled.</small>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"aside-options\">\n              <div className=\"clearfix mt-3\">\n                <small><b>Option 4</b></small>\n                <AppSwitch className={'float-right'} variant={'pill'} label color={'success'} defaultChecked size={'sm'} />\n              </div>\n            </div>\n\n            <hr />\n            <h6>System Utilization</h6>\n\n            <div className=\"text-uppercase mb-1 mt-4\">\n              <small><b>CPU Usage</b></small>\n            </div>\n            <Progress className=\"progress-xs\" color=\"info\" value=\"25\" />\n            <small className=\"text-muted\">348 Processes. 1/4 Cores.</small>\n\n            <div className=\"text-uppercase mb-1 mt-2\">\n              <small><b>Memory Usage</b></small>\n            </div>\n            <Progress className=\"progress-xs\" color=\"warning\" value=\"70\" />\n            <small className=\"text-muted\">11444GB/16384MB</small>\n\n            <div className=\"text-uppercase mb-1 mt-2\">\n              <small><b>SSD 1 Usage</b></small>\n            </div>\n            <Progress className=\"progress-xs\" color=\"danger\" value=\"95\" />\n            <small className=\"text-muted\">243GB/256GB</small>\n\n            <div className=\"text-uppercase mb-1 mt-2\">\n              <small><b>SSD 2 Usage</b></small>\n            </div>\n            <Progress className=\"progress-xs\" color=\"success\" value=\"10\" />\n            <small className=\"text-muted\">25GB/256GB</small>\n          </TabPane>*/}\n        {/* </TabContent> */}\n      </React.Fragment>\n    );\n  }\n}\n\nDefaultAside.propTypes = propTypes;\nDefaultAside.defaultProps = defaultProps;\n\nexport default DefaultAside;\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultFooter.js",["304","305"],"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst propTypes = {\n  children: PropTypes.node,\n};\n\nconst defaultProps = {};\n\nclass DefaultFooter extends Component {\n  render() {\n\n    // eslint-disable-next-line\n    const { children, ...attributes } = this.props;\n\n    return (\n      <React.Fragment>\n        <span><a href=\"#\">fms</a> &copy; {new Date().getFullYear()} All Rights Reserved.</span>\n        <span className=\"ml-auto\">Powered by <a href=\"#\">FMS Up Admin</a></span>\n      </React.Fragment>\n    );\n  }\n}\n\nDefaultFooter.propTypes = propTypes;\nDefaultFooter.defaultProps = defaultProps;\n\nexport default DefaultFooter;\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\containers\\DefaultLayout\\DefaultHeader.js",["306","307","308","309","310"],"import React, { Component } from 'react';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Badge, UncontrolledDropdown, DropdownItem, DropdownMenu, DropdownToggle, Nav, NavItem } from 'reactstrap';\nimport PropTypes from 'prop-types';\n\nimport { AppAsideToggler, AppNavbarBrand, AppSidebarToggler } from '@coreui/react';\nimport logo from '../../assets/img/brand/logo.png'\nimport sygnet from '../../assets/img/brand/sygnet.png'\nimport { withRouter } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport { adminActions } from '../../_actions/admin.actions';\nimport config from '../../_config';\nimport './DefaultHeader.css'\nimport { adminNotificationService } from '../../_services/adminNotification.service';\nimport io from 'socket.io-client';\n\nconst propTypes = {\n  children: PropTypes.node,\n};\n\nconst defaultProps = {};\n\nclass DefaultHeader extends Component {\n  state = {\n    notifications: null\n  }\n\n  componentDidMount() {\n    // this.props.dispatch(userActions.getAll());\n    this.props.dispatch(adminActions.getCurrentAdmin(this.props.history))\n    this.getNotificationCount();\n    let socket = io(config.baseUrl, config.socketHeader);\n    socket.on(\"new-adminnotification\", (m) => {\n      if (!m.isSeen) {\n        this.setState({ notifications: this.state.notifications += 1 });\n      }\n    });\n    // socket.on(\"update-adminNotification\", (m) => {\n    //   // this.getNotificationCount();\n    //   if (m.isSeen) {\n    //     this.setState({ notifications: this.state.notifications -= 1 });\n    //   }\n    // });\n    // socket.on(\"delete-adminNotification\", (m) => {\n    //   this.setState({ notifications: this.state.notifications -= 1 });\n    // });\n  }\n  getNotificationCount() {\n    adminNotificationService.unSeenlist().then(notifications => {\n      this.setState({ notifications: notifications.count })\n    })\n  }\n\n  // getImageURL(image) {\n  //   return image.includes(\"http\") || image.includes(\"base64\") ? image : config.baseUrl + image;\n  // }\n  render() {\n    const { token, admin, infosetting } = this.props;\n    // eslint-disable-next-line\n    const { children, ...attributes } = this.props;\n\n    return (\n      <React.Fragment>\n        <AppSidebarToggler className=\"d-lg-none\" display=\"md\" mobile />\n        <AppNavbarBrand\n          full={{ src: logo, width: 150, height: 42, alt: 'Seed Logo' }}\n          minimized={{ src: sygnet, width: 30, height: 30, alt: 'Seed Logo' }}\n        />\n        <AppSidebarToggler className=\"d-md-down-none\" display=\"lg\" />\n\n        <Nav className=\"d-md-down-none\" navbar>\n          <NavItem className=\"px-3\">\n            <NavLink to=\"/dashboard\" className=\"nav-link\" >Dashboard</NavLink>\n          </NavItem>\n          <NavItem className=\"px-3\">\n            <Link to=\"/users\" className=\"nav-link\">Users</Link>\n          </NavItem>\n          <NavItem className=\"px-3\">\n            <NavLink to=\"#\" className=\"nav-link\">Settings</NavLink>\n          </NavItem>\n        </Nav>\n        <Nav className=\"ml-auto\" navbar>\n          {/* <NavItem className=\"d-md-down-none\">\n            <NavLink to=\"#\" className=\"nav-link\"><i className=\"icon-bell\"></i><Badge pill color=\"danger\">5</Badge></NavLink>\n          </NavItem>\n          <NavItem className=\"d-md-down-none\">\n            <NavLink to=\"#\" className=\"nav-link\"><i className=\"icon-list\"></i></NavLink>\n          </NavItem> */}\n          <NavItem className=\"d-md-down-none\">\n            <NavLink to=\"#\" className=\"nav-link\"><i className=\"icon-location-pin\"></i></NavLink>\n          </NavItem>\n          {\n            admin && <UncontrolledDropdown nav direction=\"down\">\n              <DropdownToggle nav>\n                <img src=\"https://media.istockphoto.com/id/1146517111/photo/taj-mahal-mausoleum-in-agra.jpg?s=612x612&w=0&k=20&c=vcIjhwUrNyjoKbGbAQ5sOcEzDUgOfCsm9ySmJ8gNeRk=\" className=\"img-avatar\" alt={admin.email} />\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem header tag=\"div\" className=\"text-center\"><strong>{admin.email}</strong></DropdownItem>\n                {/*<DropdownItem><i className=\"fa fa-bell-o\"></i> Updates<Badge color=\"info\">42</Badge></DropdownItem>\n              <DropdownItem><i className=\"fa fa-envelope-o\"></i> Messages<Badge color=\"success\">42</Badge></DropdownItem>\n              <DropdownItem><i className=\"fa fa-tasks\"></i> Tasks<Badge color=\"danger\">42</Badge></DropdownItem>\n              <DropdownItem><i className=\"fa fa-comments\"></i> Comments<Badge color=\"warning\">42</Badge></DropdownItem> */}\n                {/* <DropdownItem header tag=\"div\" className=\"text-center\"><strong>Settings</strong></DropdownItem> */}\n                <DropdownItem onClick={e => {\n                  this.props.history.push('/manage')\n                }}><i className=\"fa fa-wrench\"></i>Profile Settings</DropdownItem>\n                {/* <DropdownItem><i className=\"fa fa-wrench\"></i> Settings</DropdownItem>\n              <DropdownItem><i className=\"fa fa-usd\"></i> Payments<Badge color=\"secondary\">42</Badge></DropdownItem>\n              <DropdownItem><i className=\"fa fa-file\"></i> Projects<Badge color=\"primary\">42</Badge></DropdownItem> */}\n                {/* <DropdownItem divider /> */}\n                {/* <DropdownItem><i className=\"fa fa-shield\"></i> Lock Account</DropdownItem> */}\n                <DropdownItem onClick={e => this.props.onLogout(e)}><i className=\"fa fa-lock\"></i> Logout</DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          }\n\n        </Nav>\n        <AppAsideToggler className=\"d-md-down-none\" >\n          <div onClick={() => { adminNotificationService.allseen(); this.setState({ notifications: 0 }) }}>\n            <i className=\"icon-bell\"></i>\n            {\n              this.state.notifications && this.state.notifications != 0 ?\n                <span className=\"notification-badge badge badge-danger badge-pill\">{this.state.notifications}</span>\n                : null\n            }\n          </div>\n\n\n\n\n        </AppAsideToggler>\n        {/*<AppAsideToggler className=\"d-lg-none\" mobile />*/}\n      </React.Fragment>\n    );\n  }\n}\n\nDefaultHeader.propTypes = propTypes;\nDefaultHeader.defaultProps = defaultProps;\n\n\nfunction mapStateToProps(state) {\n  const { authentication } = state;\n  return authentication;\n}\n\nconst connected = connect(mapStateToProps)(withRouter(DefaultHeader));\nexport { connected as DefaultHeader };\n\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\routes.js",["311"],"/* eslint-disable import/first */\nimport React from \"react\";\nimport { DataTable, Detail, Manage, } from \"./_pages/Authenticated/CRUD\";\n\nconst Dashboard = React.lazy(() => import(\"./views/Dashboard\"));\nimport { AdminManage } from \"./_pages/Authenticated/Admin/AdminManage\";\nimport { UserCustomNotifications } from \"./_pages/Authenticated/UserCustomNotifications/UserCustomNotifications\";\nimport { UserCustomNotification } from \"./_pages/Authenticated/UserCustomNotifications/UserCustomNotification\";\nimport { UserCustomNotificationManage } from \"./_pages/Authenticated/UserCustomNotifications/UserCustomNotificationManage\";\nimport { DistributeProfit } from \"./_pages/Authenticated/DistributeProfit\";\nimport { RideEarnings } from \"./_pages/Authenticated/RideEarnings\";\nimport { Drivers } from \"./_pages/Authenticated/Drivers/Drivers\";\n\n\n// const Console = React.lazy(() => import(\"./views/Console\"));\nconst routes = [\n  { path: \"/admin\", exact: true, name: \"Home\" },\n  { path: \"/manage\", exact: true, name: \"Admin Manage\", component: AdminManage },\n  { path: \"/dashboard\", name: \"Dashboard\", component: Dashboard },\n\n  // { path: \"/users\", exact: true, name: \"Users\", component: Users },\n  // { path: \"/user/:id/packages\", exact: true, name: \"User Packages\", component: UserPackages },\n  // { path: \"/user/filter/:type\", exact: true, name: \"Filter Users\", component: Users },\n  // { path: \"/users/:id\", exact: true, name: \"User Details\", component: User },\n  \n\n  { path: \"/drivers\", name:\"Drivers\", exact: true, component: DataTable },\n  { path: \"/user/add\", exact: true, name: \"Add Users\", component: Manage },\n  { path: \"/user/edit/:id\", exact: true, name: \"Edit Users\", component: Manage },\n  { path: \"/users/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/drivers/detail/:id\", exact: true, name: \"Details\", component: Detail },\n  { path: \"/user-custom-notifications\", exact: true, name: \"User Custom Notifications\", component: UserCustomNotifications },\n  { path: \"/user-custom-notifications/detail/:id\", exact: true, name: \"Details\", component: UserCustomNotification },\n  { path: \"/user-custom-notification/add\", exact: true, name: \"New Custom Notification\", component: UserCustomNotificationManage },\n  { path: \"/user-custom-notification/edit/:id\", exact: true, name: \"Edit User Custom Notification\", component: UserCustomNotificationManage },\n  { path: \"/user-custom-notifications/delete/:id\", exact: true, name: \"Delete\", component: UserCustomNotification },\n\n  \n  { path: \"/vehicle-categories\", exact: true, component: DataTable },\n  { path: \"/vehicle-category/add\", exact: true, name: \"Add Vehicle Category\", component: Manage },\n  { path: \"/vehicle-category/edit/:id\", exact: true, name: \"Edit Vehicle Category\", component: Manage },\n  { path: \"/vehicle-categories/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/vehicle-categories/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/verification-requests\", exact: true, component: DataTable },\n  // { path: \"/verification-request/add\", exact: true, name: \"Add Verification Request\", component: Manage },\n  { path: \"/verification-request/edit/:id\", exact: true, name: \"Edit Verification Request\", component: Manage },\n  { path: \"/verification-requests/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/verification-requests/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/pages\", exact: true, component: DataTable },\n  { path: \"/page/add\", exact: true, name: \"Add Page\", component: Manage },\n  { path: \"/page/edit/:id\", exact: true, name: \"Edit Page\", component: Manage },\n  { path: \"/pages/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/pages/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/news-categories\", exact: true, component: DataTable },\n  { path: \"/news-category/add\", exact: true, name: \"Add News Category\", component: Manage },\n  { path: \"/news-category/edit/:id\", exact: true, name: \"Edit News Category\", component: Manage },\n  { path: \"/news-categories/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/news-categories/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/news\", exact: true, component: DataTable },\n  { path: \"/news/add\", exact: true, name: \"Add News\", component: Manage },\n  { path: \"/news/edit/:id\", exact: true, name: \"Edit News\", component: Manage },\n  { path: \"/news/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/news/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n\n\n  { path: \"/supportmessages\", exact: true, component: DataTable },\n  { path: \"/supportmessages/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/supportmessages/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n\n  { path: \"/distribute-profit\", exact: true, component: DistributeProfit },\n\n  { path: \"/ride-earnings\", exact: true, component: RideEarnings },\n\n\n  // { path: '/payment-settings', exact: true, name: 'Payment Settings', component: PaymentSettings },\n\n\n  { path: \"/setting/edit/:id\", exact: true, name: \"Edit Setting\", component: Manage },\n  \n  { path: \"/roles\", exact: true, component: DataTable },\n  { path: \"/role/add\", exact: true, name: \"Add Role\", component: Manage },\n  { path: \"/role/edit/:id\", exact: true, name: \"Edit Role\", component: Manage },\n  { path: \"/roles/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/roles/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  \n  { path: \"/states\", exact: true, component: DataTable },\n  { path: \"/state/add\", exact: true, name: \"Add State\", component: Manage },\n  { path: \"/state/edit/:id\", exact: true, name: \"Edit State\", component: Manage },\n  { path: \"/states/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/states/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  \n  { path: \"/state-fares\", exact: true, component: DataTable },\n  { path: \"/state-fare/add\", exact: true, name: \"Add State Fare\", component: Manage },\n  { path: \"/state-fare/edit/:id\", exact: true, name: \"Edit State Fare\", component: Manage },\n  { path: \"/state-fares/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/state-fares/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/rides\", exact: true, component: DataTable },\n  { path: \"/ride/add\", exact: true, name: \"Add Ride\", component: Manage },\n  { path: \"/ride/edit/:id\", exact: true, name: \"Edit Ride\", component: Manage },\n  { path: \"/rides/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/rides/detail/:id\", exact: true, name: \"Details\", component: Detail },\n\n  { path: \"/usertransactions\", exact: true, component: DataTable },\n  { path: \"/usertransaction/add\", exact: true, name: \"Add Transaction\", component: Manage },\n  { path: \"/usertransaction/edit/:id\", exact: true, name: \"Edit Transaction\", component: Manage },\n  { path: \"/usertransactions/delete/:id\", exact: true, name: \"Delete\", component: Detail },\n  { path: \"/usertransactions/detail/:id\", exact: true, name: \"Details\", component: Detail },\n];\n\nexport default routes;\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_nav.js",["312"],"export default {\n  items: [\n    {\n      name: \"Dashboard\",\n      url: \"/dashboard\",\n      icon: \"icon-speedometer\",\n      badge: {\n        variant: \"info\",\n        text: \"NEW\"\n      }\n    },\n    {\n      name: \"Vehicle Categories\",\n      url: \"/vehicle-categories\",\n      icon: \"fa fa-car\",\n      children: [\n        {\n          name: \"Add Vehicle Category\",\n          url: \"/vehicle-category/add\",\n          icon: \"fa fa-plus-circle\",\n          class: 'ml-2'\n        },\n        {\n          name: \"Vehicle Categories\",\n          url: \"/vehicle-categories\",\n          icon: \"fa fa-car\",\n          class: 'ml-2'\n        },\n        {\n          name: \"State Wise Fare\",\n          url: \"/state-fares\",\n          icon: \"fa fa-globe\",\n          class: 'ml-2'\n        }\n      ]\n    },\n    {\n      name: \"Drivers\",\n      url: \"/drivers\",\n      icon: \"fa fa-user\",\n      // children: [\n      //   {\n      //     name: \"Riders\",\n      //     url: \"/users?filter={\\\"role\\\":\\\"Rider\\\"}\",\n      //     icon: \"fa fa-user\",\n      //     class: 'ml-2'\n      //   },\n      //   {\n      //     name: \"Drivers\",\n      //     url: \"/users?filter={\\\"role\\\":\\\"Driver\\\"}\",\n      //     icon: \"fa fa-user\",\n      //     class: 'ml-2'\n      //   },\n\n\n      // ]\n    },\n\n    {\n      name: \"Verification Requests\",\n      url: \"/verification-requests\",\n      icon: \"fa fa-lock\",\n    },\n\n    {\n      name: \"Rides\",\n      url: \"/rides\",\n      icon: \"fa fa-car\",\n    },\n    \n    {\n      name: \"Ride Earnings\",\n      url: \"/ride-earnings\",\n      icon: \"fa fa-usd\",\n    },\n    {\n      name: \"Transactions\",\n      url: \"/usertransactions\",\n      icon: \"fa fa-usd\",\n    },\n    {\n      name: \"Notifications\",\n      url: \"/user-custom-notifications\",\n      icon: \"fa fa-bell\",\n      children: [\n        {\n          name: \"Add Notification\",\n          url: \"/user-custom-notification/add\",\n          icon: \"fa fa-plus-circle\",\n          class: 'ml-2'\n        },\n        {\n          name: \"Notification List\",\n          url: \"/user-custom-notifications\",\n          icon: \"fa fa-bell\",\n          class: 'ml-2'\n        }\n      ]\n    },\n    {\n      name: \"News\",\n      url: \"/news\",\n      icon: \"fa fa-newspaper-o\",\n      children: [\n        {\n          name: \"News Categories\",\n          url: \"/news-categories\",\n          icon: \"fa fa-newspaper-o\",\n          class: 'ml-2'\n        },\n        {\n          name: \"Add News\",\n          url: \"/news/add\",\n          icon: \"fa fa-plus-circle\",\n          class: 'ml-2'\n        },\n        {\n          name: \"News List\",\n          url: \"/news\",\n          icon: \"fa fa-newspaper-o\",\n          class: 'ml-2'\n        }\n      ]\n    },\n\n    {\n      name: \"Support\",\n      url: \"/supportmessages\",\n      icon: \"fa fa-life-ring\",\n\n    },\n    {\n      // title: true,\n      name: 'Setup',\n      url:\"/settings\",\n      icon: 'fa fa-wrench',\n      \n      children: [\n        {\n          name: 'Pages',\n          url: '/pages',\n          icon: 'fa fa-file',\n          class: 'ml-2'\n        },\n        {\n          name: 'States',\n          url: '/states',\n          icon: 'fa fa-globe',\n          class: 'ml-2'\n        },\n        {\n          name: 'Roles',\n          url: '/roles',\n          icon: 'fa fa-user',\n          class: 'ml-2'\n        },\n        {\n          name: 'Settings',\n          url: '/setting',\n          icon: 'fa fa-wrench',\n          class: 'ml-2'\n        },\n\n      ]\n    },\n\n\n  ]\n};\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\translation-i18.js",["313"],"import { useTranslation } from 'react-i18next';\n\nexport default function () {\n    const { t } = useTranslation();\n    return t;\n}","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\auth-header.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\history.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\admin.actions.js",["314","315"],"import { adminConstants } from \"../_constants/admin.constants\";\nimport { adminService } from \"../_services/admin.service\";\nimport { alertActions } from \".\";\nimport { apiService } from \"../_services/api.service\";\n// import { history } from \"../_helpers\";\n\nexport const adminActions = {\n  login: function (email, password, history) {\n   \n    return dispatch => {\n     \n      dispatch(alertActions.clear());\n      dispatch(request({ email }));\n\n      adminService.login(email, password).then(\n        token => {\n          dispatch(success(token));\n          history.push(\"/dashboard\");\n        },\n        error => {\n          dispatch(failure(error));\n\n\n          dispatch(alertActions.error(error == \"TypeError: Failed to fetch\" ? \"Internet Problem\" : error));\n        }\n      );\n    };\n    function request(email) {\n      return { type: adminConstants.LOGIN_REQUEST, email };\n    }\n    function success(token) {\n      return { type: adminConstants.LOGIN_SUCCESS, token };\n    }\n    function failure(error) {\n      return { type: adminConstants.LOGIN_FAILURE, error };\n    }\n  },\n\n  getCurrentAdmin: function (history) {\n    return dispatch => {\n      dispatch(request());\n\n      adminService.getCurrentAdmin().then(\n        user => {\n          dispatch(success(user));\n\n          // history.push('/');\n        },\n        error => {\n          dispatch(failure(error));\n        \n          // console.log(error);\n          // dispatch(alertActions.error(error));\n        }\n      );\n    };\n\n    function request() {\n      return { type: adminConstants.GET_CURRENT_REQUEST };\n    }\n    function success(admin, infosetting) {\n      return { type: adminConstants.GET_CURRENT_SUCCESS, admin, infosetting };\n    }\n    function failure(error) {\n      return { type: adminConstants.GET_CURRENT_FAILURE, error };\n    }\n  },\n\n  logout: function () {\n    adminService.logout();\n    return { type: adminConstants.LOGOUT };\n  },\n\n  getAll: function () {\n    return dispatch => {\n      dispatch(request());\n\n      adminService.getAll().then(\n        users => dispatch(success(users)),\n        error => dispatch(failure(error))\n      );\n    };\n\n    function request() {\n      return { type: adminConstants.GETALL_REQUEST };\n    }\n    function success(users) {\n      return { type: adminConstants.GETALL_SUCCESS, users };\n    }\n    function failure(error) {\n      return { type: adminConstants.GETALL_FAILURE, error };\n    }\n  }\n};\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\fake-backend.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\index.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\admin.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotificationManage.js",["316","317"],"import React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, Col, Row } from 'reactstrap';\n\nimport { userCustomNotificationActions } from '../../../_actions/userCustomNotification.actions';\nimport { settingsService } from '../../../_services/settings.service';\nimport { userService } from '../../../_services/user.service';\nimport { connect } from 'react-redux';\nimport config from '../../../_config';\nimport validate from 'validate.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Field from '../../../_common/field';\nimport Notification from '../../../_common/notification';\nconst defaultImage = \"https://c7.uihere.com/icons/22/702/390/staff-channel-app-default-0c2f68d42cf81f4f6cedf5fc0c6894d8.png\";\nclass UserCustomNotificationManage extends Component {\n  state = {\n    userCustomNotificationObj: {\n      \"_id\": \"\",\n      \"title\": \"\",\n      \"body\": \"\",\n      \"type\": \"\",\n      \"userId\": \"\",\n      \"senderType\": \"\",\n      \"image\": defaultImage,\n      \"selectedImage\": null,\n      \"status\": true,\n    },\n    setting: null,\n    errors: {},\n    formError: null,\n    loaded: 0,\n    pageLoading: true,\n    users: []\n  }\n\n  componentDidMount() {\n    settingsService.Get().then(setting => {\n      userService.getAll().then(users => {\n        this.setState({\n          setting, users: users.filter(m => m.status\n            // && m.isEmailConfirmed\n            // && m.verified \n            && m.expoToken && m.expoToken != \"UnSet\"\n          )\n        });\n      })\n    })\n    if (this.props.match.params.id) {\n      this.props.dispatch(userCustomNotificationActions.getSingle(this.props.match.params.id)).then(userCustomNotificationObj => {\n        this.setState({ userCustomNotificationObj })\n      }).catch(m => {\n        this.props.history.push('/user-custom-notifications')\n      })\n    }\n\n\n  }\n\n  getImageURL(image) {\n    return image ? image.includes(\"http\") || image.includes(\"base64\") ? image\n      : config.baseUrl + image : defaultImage;\n  }\n\n  convertAllParametersToString(ad) {\n    for (var prop in ad) {\n      ad[prop] += \"\";\n    }\n    return ad;\n  }\n  static get RULES() {\n    return {\n      title: { presence: { allowEmpty: false }, },\n      body: { presence: { allowEmpty: true } },\n      type: { presence: { allowEmpty: true } },\n      userId: { presence: { allowEmpty: false } },\n      senderType: { presence: { allowEmpty: false } },\n    };\n  }\n  handleChange({ target }) {\n    const { name, value } = target;\n    const errors = validate({ [name]: value }, { [name]: UserCustomNotificationManage.RULES[name] });\n    let obj = this.fillInObject(Object.assign({}, this.state.userCustomNotificationObj), name, value);\n    this.setState({\n      userCustomNotificationObj: obj,\n      errors: Object.assign(\n        {},\n        this.state.errors,\n        errors ? errors : { [name]: undefined }\n      )\n    });\n  }\n  handleModulesChange(name, value, i) {\n    // const errors = validate({ \"modules\": value }, { \"modules\": UserCustomNotificationManage.RULES.modules });\n    let obj = this.state.userCustomNotificationObj;\n    obj.modules = this.fillInSubObject(obj.modules, name, i, value);\n    this.setState({\n      userCustomNotificationObj: obj,\n      // errors: Object.assign(\n      //   {},\n      //   this.state.errors,\n      //   errors ? errors : { modules: undefined }\n      // )\n    });\n  }\n  fillInObject(obj, name, value) {\n    obj[name] = value;\n    return obj;\n  }\n  fillInSubObject(obj, name, i, value) {\n    obj[i][name] = value;\n    return obj;\n  }\n  checkMimeType = (event) => {\n    //getting file object\n    let files = event.target.files\n    //define message container\n    let err = []\n    // list allow mime type\n    const types = ['image/png', 'image/jpeg', 'image/gif']\n    // loop access array\n    for (var x = 0; x < files.length; x++) {\n      // compare file type find doesn't matach\n      if (types.every(type => files[x].type !== type)) {\n        // create error message and assign to container   \n        err[x] = files[x].type + ' is not a supported format\\n';\n      }\n    };\n    for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n      // discard selected file\n      toast.error(err[z])\n      event.target.value = null\n    }\n    return (err.length > 0) ? false : true;\n  }\n  maxSelectFile = (event) => {\n    let files = event.target.files\n    if (files.length > 1) {\n      const msg = 'Only 1 images can be uploaded at a time'\n      event.target.value = null\n      toast.warn(msg)\n      return false;\n    }\n    return true;\n  }\n  checkFileSize = (event) => {\n    let files = event.target.files\n    let size = 2000000\n    let err = [];\n    for (var x = 0; x < files.length; x++) {\n      if (files[x].size > size) {\n        err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n      }\n    };\n    for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n      // discard selected file\n      toast.error(err[z])\n      event.target.value = null\n    }\n    return true;\n  }\n  onChangeHandler = event => {\n    var files = event.target.files;\n    if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n      try {\n        let reader = new FileReader();\n        reader.readAsDataURL(files[0]);\n        reader.onload = (e) => {\n          // base 64\n          let file = e.target.result;\n\n          let obj = this.fillInObject(Object.assign({}, this.state.userCustomNotificationObj), \"image\", file);\n          obj.selectedImage = files[0];\n\n          this.setState({\n            userCustomNotificationObj: obj\n          });\n        }\n      } catch (error) {\n        toast.error('Invalid Image')\n      }\n    }\n  }\n  isContainProps(ad) {\n    let rt = false;\n    for (var prop in ad) {\n      if (ad[prop] && ad.hasOwnProperty(prop)) {\n        rt = true;\n        // handle prop as required\n      }\n    }\n    return rt;\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    let rules = UserCustomNotificationManage.RULES;\n    if (this.state.userCustomNotificationObj.type === \"All Users\") {\n      delete rules[\"userId\"];\n    }\n\n    // if (this.state.userCustomNotificationObj.image) {\n    const errors = validate(this.state.userCustomNotificationObj, rules);\n    debugger;\n    if (errors) {\n      toast.error(\"Form data is Invalid\")\n      return this.setState({ formError: null, errors });\n    }\n\n    this.setState({ isLoading: true }, () => {\n      let data = JSON.parse(JSON.stringify(this.state.userCustomNotificationObj));\n      data[\"users\"] = this.state.users;\n      if (!this.state.userCustomNotificationObj._id) {\n        this.props.dispatch(userCustomNotificationActions.add(data)).then(res => {\n          toast.success(res.message);\n          setTimeout(() => {\n            this.props.history.push('/user-custom-notifications')\n          }, 3000);\n\n        }).catch(err => {\n          this.setState({ isLoading: false });\n          toast.error(err.response.data.message);\n        })\n      } else {\n        this.props.dispatch(userCustomNotificationActions.update(data, this.state.userCustomNotificationObj._id)).then(res => {\n          this.props.history.push('/user-custom-notifications')\n        }).catch(err => {\n          this.setState({ isLoading: false });\n          toast.error(err.response.data.message);\n        })\n      }\n    })\n\n\n\n    // } else {\n    //   toast.error(\"Please Upload Packege Image\")\n    // }\n  }\n\n\n  render() {\n    const { userCustomNotificationObj, isLoading, errors, users } = this.state;\n    const loading = this.props.userCustomNotifications.loading;\n\n\n    return (\n      <div>\n        {\n          loading ? <span><i className=\"text-muted icon-wait\"></i> Loading...</span> :\n            userCustomNotificationObj ? <div className=\"animated fadeIn\" >\n              <Row>\n                <Col lg={8}>\n                  <form onSubmit={e => this.handleSubmit(e)} >\n                    {this.state.formError ? (\n                      <Notification type=\"danger\" onCloseBtnClick={e => this.setState({ formError: null })}>\n                        {this.state.formError}\n                      </Notification>\n                    ) : null}\n                    <Card>\n                      <CardHeader>\n                        <div className=\"row\">\n                          <div className=\"col-10\">\n                            <strong><i className=\"fa fa-cube pr-1\"></i>New Custom Notification</strong>\n                          </div>\n                          <div className=\"col-2\">\n                            <button className=\"btn btn-success btn-block\" disabled={isLoading}>Save</button>\n                          </div>\n                        </div>\n\n                      </CardHeader>\n                      <CardBody>\n\n                        <ToastContainer />\n                        <Field label=\"Sender Type\" errors={errors.senderType}>\n                          <select name=\"senderType\" value={userCustomNotificationObj.senderType}\n                            disabled={isLoading}\n                            onChange={e => this.handleChange(e)}>\n                            <option value={null}>Sender Type</option>\n                            <option value=\"Push\">Push</option>\n                            <option value=\"Email\">Email</option>\n                          </select>\n                        </Field>\n                        <Field label=\"Type\" errors={errors.type}>\n                          <select name=\"type\" value={userCustomNotificationObj.type}\n                            disabled={isLoading}\n\n                            onChange={e => this.handleChange(e)}>\n                            <option value={null}>Select Type</option>\n                            <option value=\"All Users\">All Users</option>\n                            <option value=\"Specific User\">Specific User</option>\n                          </select>\n\n                        </Field>\n                        {\n                          userCustomNotificationObj.type === \"Specific User\" &&\n                          <Field label=\"User\" errors={errors.userId}>\n                            <select name=\"userId\" value={userCustomNotificationObj.userId}\n                              disabled={isLoading}\n                              onChange={e => this.handleChange(e)}>\n                              <option value={null}>Select User</option>\n                              {users.map((u, i) => <option value={u._id} key={i}>\n                                {u.firstName} {u.lastName} | {u.email}\n                              </option>)}\n                            </select>\n                          </Field>\n                        }\n                        <Field label=\"Title\" errors={errors.title}>\n                          <input\n                            name=\"title\"\n                            type=\"text\"\n                            placeholder=\"Title\"\n                            value={userCustomNotificationObj.title}\n                            disabled={isLoading}\n                            onChange={e => this.handleChange(e)}\n                          />\n                        </Field>\n                        <Field label=\"Body\" errors={errors.body}>\n                          <textarea\n                            name=\"body\"\n                            placeholder=\"Body\"\n                            value={userCustomNotificationObj.body}\n                            disabled={isLoading}\n                            onChange={e => this.handleChange(e)}\n                          >\n                          </textarea>\n                        </Field>\n                        \n                      \n\n                      </CardBody>\n                    </Card>\n                  </form>\n                </Col>\n              </Row>\n            </div>\n              : <span><i className=\"text-muted icon-ban\"></i> Not found</span>\n        }\n      </div>\n    )\n\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { userCustomNotifications } = state;\n  // const {token, admin} = authentication;\n  return {\n    userCustomNotifications\n  };\n}\n\nconst connected = connect(mapStateToProps)(UserCustomNotificationManage);\nexport { connected as UserCustomNotificationManage }; \n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotification.js",["318","319","320"],"import React, { Component } from 'react';\nimport { Badge, Card, CardBody, CardHeader, Col, Row, Table } from 'reactstrap';\n\nimport { userCustomNotificationActions } from '../../../_actions/userCustomNotification.actions';\nimport { connect } from 'react-redux';\nimport config from '../../../_config';\n\nclass UserCustomNotification extends Component {\n  state = {\n    status: false,\n    delete: false\n  }\n\n  componentDidMount() {\n    const { pathname } = this.props.location;\n    this.props.dispatch(userCustomNotificationActions.getSingle(this.props.match.params.id)).then(userCustomNotificationObj => {\n      this.setState({ status: userCustomNotificationObj.status, delete: pathname.includes(\"delete\") })\n    })\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevProps.userCustomNotifications !== this.props.userCustomNotifications) {\n      // Do whatever you want\n      if (this.props.userCustomNotifications.single) {\n        // this.setState({ status: this.props.userCustomNotifications.single.status, verified: this.props.userCustomNotifications.single.verified })\n      }\n    }\n  }\n  getImageURL(image) {\n    return image ? image.includes(\"http\") ? image : config.baseUrl + image : config.baseUrl + \"/public/uploads/subscription-icon-png-8.png\";\n  }\n\n  render() {\n    const userCustomNotificationObj = this.props.userCustomNotifications && this.props.userCustomNotifications.single ? this.props.userCustomNotifications.single : null;\n    const loading = this.props.userCustomNotifications.loading;\n    const getBadge = (status) => {\n      return status ? 'success' : 'danger'\n    }\n\n    return (\n      <div>\n        {\n          loading ? <span><i className=\"text-muted icon-wait\"></i> Loading...</span> :\n            userCustomNotificationObj ? <div className=\"animated fadeIn\" >\n              <Row>\n                <Col lg={6}>\n                  <Card>\n                    <CardHeader>\n                      <strong><i className=\"icon-info pr-1\"></i>User Custom Notification</strong>\n                    </CardHeader>\n                    <CardBody>\n                      <Table responsive striped hover>\n                        <tbody>\n\n                          <tr>\n                            <td>Ttile: </td><td><strong>{userCustomNotificationObj.title}</strong></td>\n                          </tr>\n                          <tr>\n                            <td>Body: </td><td><strong>{userCustomNotificationObj.body}</strong></td>\n                          </tr>\n\n                          <tr>\n                            <td>Type: </td><td><strong>{userCustomNotificationObj.type}</strong></td>\n                          </tr>\n                          {userCustomNotificationObj.userName != \"\" &&\n                            <tr>\n                              <td>User: </td><td><strong>{userCustomNotificationObj.userName}</strong></td>\n                            </tr>\n                          }\n\n                          {this.state.delete &&\n                            <tr>\n                              <td>\n                                Comfirmation:\n                              </td>\n                              <td>\n                                <button className=\"btn btn-danger btn-sm\"\n                                  type=\"button\"\n                                  onClick={() => {\n                                    this.props.dispatch(userCustomNotificationActions.delete(userCustomNotificationObj._id)).then(d => {\n                                      this.props.history.push('/user-custom-notifications')\n                                    })\n                                  }}\n                                >\n                                  <i className=\"icon-trash\"></i> Delete\n                                </button>\n                                <button className=\"btn btn-info btn-sm text-white ml-1\"\n                                  type=\"button\"\n                                  onClick={() => {\n                                    this.props.history.push('/user-custom-notifications')\n                                  }}\n                                >\n                                  Cancel\n                                </button>\n                              </td>\n                            </tr>\n                          }\n\n\n\n                        </tbody>\n                      </Table>\n                    </CardBody>\n                  </Card>\n                </Col>\n\n\n              </Row>\n            </div >\n              : <span><i className=\"text-muted icon-ban\"></i> Not found</span>\n        }\n      </div>\n    )\n\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { userCustomNotifications } = state;\n  // const {token, admin} = authentication;\n  return {\n    userCustomNotifications\n  };\n}\n\nconst connected = connect(mapStateToProps)(UserCustomNotification);\nexport { connected as UserCustomNotification }; \n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\admin.constants.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\alert.reducer.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\userCustomNotification.reducer.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\users.reducer.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\admins.reducer.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_reducers\\authentication.reducer.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_config\\index.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\index.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\views\\Dashboard\\Dashboard.js",["321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348"],"import React, { lazy, useState } from 'react';\nimport { Bar, Line } from 'react-chartjs-2';\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Badge, Card, CardBody, CardFooter, CardHeader, CardTitle, Col, Progress, Row, } from 'reactstrap';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities'\n// import { dashboardService } from '../../_services/dashboard.service';\n\nconst Widget03 = lazy(() => import('../../views/Widgets/Widget03'));\n\nconst brandPrimary = getStyle('--primary')\nconst brandSuccess = getStyle('--success')\nconst brandInfo = getStyle('--info')\nconst brandWarning = getStyle('--warning')\nconst brandDanger = getStyle('--danger')\n\nvar month = new Array();\nmonth[0] = \"January\";\nmonth[1] = \"February\";\nmonth[2] = \"March\";\nmonth[3] = \"April\";\nmonth[4] = \"May\";\nmonth[5] = \"June\";\nmonth[6] = \"July\";\nmonth[7] = \"August\";\nmonth[8] = \"September\";\nmonth[9] = \"October\";\nmonth[10] = \"November\";\nmonth[11] = \"December\";\n\n// Card Chart 1\nconst cardChartData1 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'Active Users',\n      backgroundColor: brandPrimary,\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [65, 59, 84, 84, 51, 55, 40],\n    },\n  ],\n};\n\nconst cardChartOpts1 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'transparent',\n          zeroLineColor: 'transparent',\n        },\n        ticks: {\n          fontSize: 2,\n          fontColor: 'transparent',\n        },\n\n      }],\n    yAxes: [\n      {\n        display: false,\n        ticks: {\n          display: false,\n          min: Math.min.apply(Math, cardChartData1.datasets[0].data) - 5,\n          max: Math.max.apply(Math, cardChartData1.datasets[0].data) + 5,\n        },\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 1,\n    },\n    point: {\n      radius: 4,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  }\n}\n\n\n// Card Chart 2\nconst cardChartData2 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'Rides',\n      backgroundColor: brandInfo,\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [1, 18, 9, 17, 34, 22, 11],\n    },\n  ],\n};\n\nconst cardChartOpts2 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'transparent',\n          zeroLineColor: 'transparent',\n        },\n        ticks: {\n          fontSize: 2,\n          fontColor: 'transparent',\n        },\n\n      }],\n    yAxes: [\n      {\n        display: false,\n        ticks: {\n          display: false,\n          min: Math.min.apply(Math, cardChartData2.datasets[0].data) - 5,\n          max: Math.max.apply(Math, cardChartData2.datasets[0].data) + 5,\n        },\n      }],\n  },\n  elements: {\n    line: {\n      tension: 0.00001,\n      borderWidth: 1,\n    },\n    point: {\n      radius: 4,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  },\n};\n\n// Card Chart 3\nconst cardChartData3 = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'Rides',\n      backgroundColor: 'rgba(255,255,255,.2)',\n      borderColor: 'rgba(255,255,255,.55)',\n      data: [78, 81, 80, 45, 34, 12, 40],\n    },\n  ],\n};\n\nconst cardChartOpts3 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 2,\n    },\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n    },\n  },\n};\n\n// Card Chart 4\nconst cardChartData4 = {\n  labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n  datasets: [\n    {\n      label: 'Rides',\n      backgroundColor: 'rgba(255,255,255,.3)',\n      borderColor: 'transparent',\n      data: [78, 81, 80, 45, 34, 12, 40, 75, 34, 89, 32, 68, 54, 72, 18, 98],\n    },\n  ],\n};\n\nconst cardChartOpts4 = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n        barPercentage: 0.6,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n};\n\n// Social Box Chart\nconst socialBoxData = [\n  { data: [65, 59, 84, 84, 51, 55, 40], label: 'facebook' },\n  { data: [1, 13, 9, 17, 34, 41, 38], label: 'twitter' },\n  { data: [78, 81, 80, 45, 34, 12, 40], label: 'linkedin' },\n  { data: [35, 23, 56, 22, 97, 23, 64], label: 'google' },\n];\n\nconst makeSocialBoxData = (dataSetNo) => {\n  const dataset = socialBoxData[dataSetNo];\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n      {\n        backgroundColor: 'rgba(255,255,255,.1)',\n        borderColor: 'rgba(255,255,255,.55)',\n        pointHoverBackgroundColor: '#fff',\n        borderWidth: 2,\n        data: dataset.data,\n        label: dataset.label,\n      },\n    ],\n  };\n  return () => data;\n};\n\nconst socialChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  responsive: true,\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n};\n\n// sparkline charts\nconst sparkLineChartData = [\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: 'Clients',\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: 'Recurring Clients',\n  },\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: 'Pageviews',\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: 'Organic',\n  },\n  {\n    data: [78, 81, 80, 45, 34, 12, 40],\n    label: 'CTR',\n  },\n  {\n    data: [1, 13, 9, 17, 34, 41, 38],\n    label: 'Bounce Rate',\n  },\n];\n\nconst makeSparkLineData = (dataSetNo, variant) => {\n  const dataset = sparkLineChartData[dataSetNo];\n  const data = {\n    labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n    datasets: [\n      {\n        backgroundColor: 'transparent',\n        borderColor: variant ? variant : '#c2cfd6',\n        data: dataset.data,\n        label: dataset.label,\n      },\n    ],\n  };\n  return () => data;\n};\n\nconst sparklineChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  responsive: true,\n  maintainAspectRatio: true,\n  scales: {\n    xAxes: [\n      {\n        display: false,\n      }],\n    yAxes: [\n      {\n        display: false,\n      }],\n  },\n  elements: {\n    line: {\n      borderWidth: 2,\n    },\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n  legend: {\n    display: false,\n  },\n};\n\n// Main Chart\n\n//Random Numbers\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar elements = 27;\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\n\nfor (var i = 0; i <= elements; i++) {\n  data1.push(random(50, 200));\n  data2.push(random(80, 100));\n  data3.push(65);\n}\n\nconst mainChart = {\n  labels: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n  datasets: [\n    {\n      label: 'My First dataset',\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 2,\n      data: data1,\n    },\n    {\n      label: 'My Second dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandSuccess,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 2,\n      data: data2,\n    },\n    {\n      label: 'My Third dataset',\n      backgroundColor: 'transparent',\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: '#fff',\n      borderWidth: 1,\n      borderDash: [8, 5],\n      data: data3,\n    },\n  ],\n};\n\nconst mainChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips,\n    intersect: true,\n    mode: 'index',\n    position: 'nearest',\n    callbacks: {\n      labelColor: function (tooltipItem, chart) {\n        return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n      }\n    }\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false,\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          drawOnChartArea: false,\n        },\n      }],\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n          maxTicksLimit: 5,\n          stepSize: Math.ceil(250 / 5),\n          max: 250,\n        },\n      }],\n  },\n  elements: {\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3,\n    },\n  },\n};\n\nconst Dashboard = () => {\n  const [dropdownOpen, setDropDownOpen] = useState(false)\n  const [regiseteredUserCounter, setRegiseteredUserCounter] = useState(0)\n  const [registeredUserData, setRegisteredUserData] = useState(null)\n  const [activeUserCounter, setActiveUserCounter] = useState(null)\n  const [radioSelected, setRadioSelected] = useState(null)\n  const [activeUserOptions, setActiveUserOptions] = useState(null)\n  const [registeredUserOptions, setRegisteredUserOptions] = useState(null)\n  const [verifiedUserData, setVerifiedUserData] = useState(null)\n  const [rideCounter, setRideCounter] = useState(null)\n  const [userGroupData, setUserGroupData] = useState(null)\n  const [verifiedUserCounter , setVerifiedUserCounter ] = useState(null)\n  const [verifiedUserOptions , setVerifiedUserOptions ] = useState(null)\n  const [clientData , setClientData ] = useState(null)\n  const [activeUserData , setActiveUserData ] = useState(null)\n  const [rideData , setRideData ] = useState(null)\n  const [rideOptions , setRideOptions ] = useState(null)\n  const [clientCounter , setClientCounter ] = useState(null)\n  const [clientAppointmentCounter , setClientAppointmentCounter ] = useState(null)\n  const [clientAppointmentData , setClientAppointmentData ] = useState(null)\n  const [clientTaskCounter , setClientTaskCounter ] = useState(null)\n  const [clientTaskData , setClientTaskData ] = useState(null)\n  const [userGroupCounter , setUserGroupCounter ] = useState(null)\n  \n\n\n  //     state = {\n  //       dropdownOpen: false,\n  //       radioSelected: 2,\n  //       mainChart: null,\n  //       regiseteredUserCounter: null,\n  //       registeredUserData: null,\n  //       registeredUserOptions: null,\n  //       activeUserCounter: null,\n  //       activeUserData: null,\n  //       activeUserOptions: null,\n  //       verifiedUserCounter: null,\n  //       verifiedUserData: null,\n  //       verifiedUserOptions: null,\n  //       rideCounter: null,\n  //       rideData: null,\n  //       rideOptions: null,\n  //       clientCounter: null,\n  //       clientData: null,\n  //       clientAppointmentCounter: null,\n  //       clientAppointmentData: null,\n  //       clientTaskCounter: null,\n  //       clientTaskData: null,\n  //       userGroupCounter: null,\n  //       userGroupData: null,\n  //     };\n  //   }\n\n  //     // dashboardService.userCounter().then(counter => {\n  //     //   this.setState({ userCounter: counter })\n  //     // })\n  //     let x = 0;\n\n  //     dashboardService.registeredUserGraph().then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.activeUserGraph().then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.verifiedUserGraph().then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.rideGraph().then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.clientGraph(brandPrimary).then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.clientAppointmentsGraph(brandDanger).then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.clientTasksGraph(brandWarning).then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     dashboardService.userGroupGraph(brandSuccess).then(m => {\n  //       x++;\n  //       this.setState(m);\n  //     });\n  //     let i = setInterval(() => {\n  //       if (x > 4) {\n  //         clearInterval(i); console.log();\n\n  //         this.setState({\n  //           mainChart: {\n  //             labels: registeredUserData.labels,\n  //             datasets: [\n  //               {\n  //                 label: 'Registered Users',\n  //                 backgroundColor: hexToRgba(brandInfo, 10),\n  //                 borderColor: brandInfo,\n  //                 pointHoverBackgroundColor: '#fff',\n  //                 borderWidth: 2,\n  //                 data: registeredUserData.datasets[0].data,\n  //               },\n  //               {\n  //                 label: 'Active Users',\n  //                 backgroundColor: 'transparent',\n  //                 borderColor: brandSuccess,\n  //                 pointHoverBackgroundColor: '#fff',\n  //                 borderWidth: 2,\n  //                 // data: data2,\n  //                 data: activeUserData.datasets[0].data,\n  //               },\n  //               {\n  //                 label: 'Online Users',\n  //                 backgroundColor: 'transparent',\n  //                 borderColor: brandDanger,\n  //                 pointHoverBackgroundColor: '#fff',\n  //                 borderWidth: 1,\n  //                 borderDash: [8, 5],\n  //                 // data: data3,\n  //                 data: rideData.datasets[0].data,\n  //               },\n  //             ],\n  //           }\n  //         })\n  //       }\n  //     }, 500);\n\n\n  //  const toggle=() =>{\n  //     this.setState({\n  //       dropdownOpen: !dropdownOpen,\n  //     });\n  //   }\n\n  //   onRadioBtnClick(radioSelected) {\n  //     this.setState({\n  //       radioSelected: radioSelected,\n  //     });\n  //   }\n\n  //   const loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n\n\n\n  return (\n    <div className=\"animated fadeIn\">\n      <Row>\n\n        <Col xs=\"12\" sm=\"6\" lg=\"3\" >\n          <Link to='/users?filter={\"role\":\"Rider\"}' style={{ textDecoration: 'none' }}>\n            <Card className=\"text-white bg-info\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\">{regiseteredUserCounter ? regiseteredUserCounter : \"Loading...\"}</div>\n                <div>Riders</div>\n              </CardBody>\n              <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                <Line\n                  data={registeredUserData ? registeredUserData : cardChartData2}\n                  options={registeredUserOptions ? registeredUserOptions : cardChartOpts2}\n                  height={70} />\n              </div>\n            </Card>\n          </Link>\n        </Col>\n\n        <Col xs=\"12\" sm=\"6\" lg=\"3\">\n          <Link to='users?filter={\"role\":\"Driver\"}' style={{ textDecoration: 'none' }}>\n            <Card className=\"text-white bg-warning\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\" > {verifiedUserCounter ? verifiedUserCounter : \"Loading...\"}</div>\n                <div>Drivers</div>\n\n              </CardBody>\n              <div className=\"chart-wrapper\" style={{ height: '70px' }}>\n                <Line\n                  data={verifiedUserData ? verifiedUserData : cardChartData3}\n                  options={verifiedUserOptions ? verifiedUserOptions : cardChartOpts3}\n                  height={70} />\n              </div>\n            </Card>\n          </Link>\n        </Col>\n\n\n        <Col xs=\"12\" sm=\"6\" lg=\"3\">\n          <Link to=\"/user/filter/active\" style={{ textDecoration: 'none' }}>\n            <Card className=\"text-white bg-primary\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\">{activeUserCounter ? activeUserCounter : \"Loading...\"}</div>\n                <div>Active Users</div>\n              </CardBody>\n              <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                <Line\n                  data={activeUserData ? activeUserData : cardChartData1}\n                  options={activeUserOptions ? activeUserOptions : cardChartOpts1}\n                  height={70} />\n              </div>\n            </Card>\n          </Link>\n        </Col>\n\n\n        <Col xs=\"12\" sm=\"6\" lg=\"3\">\n          <Link to=\"/rides\" style={{ textDecoration: 'none' }}>\n            <Card className=\"text-white bg-danger\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\" > {rideCounter ? rideCounter : \"Loading...\"}</div>\n                <div>Rides</div>\n              </CardBody>\n              <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                <Bar\n                  data={rideData ? rideData : cardChartData4}\n                  options={rideOptions ? rideOptions : cardChartOpts4}\n                  height={70} />\n              </div>\n            </Card>\n          </Link>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Card>\n            <CardBody>\n              <Row>\n                <Col sm=\"5\">\n                  <CardTitle className=\"mb-0\">Traffic</CardTitle>\n                  <div className=\"small text-muted\">{month[new Date().getMonth()]} {new Date().getFullYear()}</div>\n                </Col>\n                {/* <Col sm=\"7\" className=\"d-none d-sm-inline-block\">\n                  <Button color=\"primary\" className=\"float-right\"><i className=\"icon-cloud-download\"></i></Button>\n                    <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with button groups\">\n                      <ButtonGroup className=\"mr-3\" aria-label=\"First group\">\n                        <Button color=\"outline-secondary\" onClick={() => this.onRadioBtnClick(1)} active={radioSelected === 1}>Day</Button>\n                        <Button color=\"outline-secondary\" onClick={() => this.onRadioBtnClick(2)} active={radioSelected === 2}>Month</Button>\n                        <Button color=\"outline-secondary\" onClick={() => this.onRadioBtnClick(3)} active={radioSelected === 3}>Year</Button>\n                      </ButtonGroup>\n                    </ButtonToolbar>\n                </Col> */}\n              </Row>\n              <div className=\"chart-wrapper\" style={{ height: 300 + 'px', marginTop: 40 + 'px' }}>\n                <Line data={mainChart ? mainChart : mainChart} options={mainChartOpts} height={300} />\n              </div>\n            </CardBody>\n            <CardFooter>\n              <Row className=\"text-center\">\n                <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                  <div className=\"text-muted\">Visits</div>\n                  <strong>29.703 Users (40%)</strong>\n                  <Progress className=\"progress-xs mt-2\" color=\"success\" value=\"40\" />\n                </Col>\n                <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                  <div className=\"text-muted\">Unique</div>\n                  <strong>24.093 Users (20%)</strong>\n                  <Progress className=\"progress-xs mt-2\" color=\"info\" value=\"20\" />\n                </Col>\n                <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                  <div className=\"text-muted\">Pageviews</div>\n                  <strong>78.706 Views (60%)</strong>\n                  <Progress className=\"progress-xs mt-2\" color=\"warning\" value=\"60\" />\n                </Col>\n                <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                  <div className=\"text-muted\">New Users</div>\n                  <strong>22.123 Users (80%)</strong>\n                  <Progress className=\"progress-xs mt-2\" color=\"danger\" value=\"80\" />\n                </Col>\n                <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                  <div className=\"text-muted\">Bounce Rate</div>\n                  <strong>Average Rate (40.15%)</strong>\n                  <Progress className=\"progress-xs mt-2\" color=\"primary\" value=\"40\" />\n                </Col>\n              </Row>\n            </CardFooter>\n          </Card>\n        </Col>\n      </Row>\n\n      {/* <Row>\n          <Col xs=\"6\" sm=\"6\" lg=\"3\">\n            <Suspense fallback={this.loading()}>\n              <Widget03 dataBox={() => ({ variant: 'facebook', friends: '89k', feeds: '459' })} >\n                <div className=\"chart-wrapper\">\n                  <Line data={makeSocialBoxData(0)} options={socialChartOpts} height={90} />\n                </div>\n              </Widget03>\n            </Suspense>\n          </Col>\n\n          <Col xs=\"6\" sm=\"6\" lg=\"3\">\n            <Suspense fallback={this.loading()}>\n              <Widget03 dataBox={() => ({ variant: 'twitter', followers: '973k', tweets: '1.792' })} >\n                <div className=\"chart-wrapper\">\n                  <Line data={makeSocialBoxData(1)} options={socialChartOpts} height={90} />\n                </div>\n              </Widget03>\n            </Suspense>\n          </Col>\n\n          <Col xs=\"6\" sm=\"6\" lg=\"3\">\n            <Suspense fallback={this.loading()}>\n              <Widget03 dataBox={() => ({ variant: 'linkedin', contacts: '500+', feeds: '292' })} >\n                <div className=\"chart-wrapper\">\n                  <Line data={makeSocialBoxData(2)} options={socialChartOpts} height={90} />\n                </div>\n              </Widget03>\n            </Suspense>\n          </Col>\n\n          <Col xs=\"6\" sm=\"6\" lg=\"3\">\n            <Suspense fallback={this.loading()}>\n              <Widget03 dataBox={() => ({ variant: 'google-plus', followers: '894', circles: '92' })} >\n                <div className=\"chart-wrapper\">\n                  <Line data={makeSocialBoxData(3)} options={socialChartOpts} height={90} />\n                </div>\n              </Widget03>\n            </Suspense>\n          </Col>\n        </Row> */}\n\n      <Row>\n        <Col>\n          <Card>\n            <CardHeader>\n              Traffic {' & '} Activity\n            </CardHeader>\n            <CardBody>\n              <Row>\n                <Col xs=\"12\" md=\"6\" xl=\"6\">\n                  <Row>\n                    <Col sm=\"6\">\n                      <div className=\"callout callout-info\">\n                        <small className=\"text-muted\">Clients</small>\n                        <br />\n                        <strong className=\"h4\">{clientCounter ? clientCounter : 0}</strong>\n\n                        <div className=\"chart-wrapper\">\n                          <Line data={clientData ? clientData : makeSparkLineData(0, brandPrimary)} options={sparklineChartOpts} width={100} height={30} />\n                        </div>\n                      </div>\n                    </Col>\n                    <Col sm=\"6\">\n                      <div className=\"callout callout-danger\">\n                        <small className=\"text-muted\">Agends</small>\n                        <br />\n                        <strong className=\"h4\">{clientAppointmentCounter ? clientAppointmentCounter : 0}</strong>\n\n                        <div className=\"chart-wrapper\">\n                          <Line data={clientAppointmentData ? clientAppointmentData : makeSparkLineData(1, brandDanger)} options={sparklineChartOpts} width={100} height={30} />\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                  <hr className=\"mt-0\" />\n                  {clientData && clientAppointmentData &&\n                    clientData.labels.map((label, key) => {\n                      const counter1 = clientData.datasets[0].data[key];\n                      const counter2 = clientAppointmentData.datasets[0].data[key];\n                      return (<div className=\"progress-group mb-4\" key={key}>\n                        <div className=\"progress-group-prepend\">\n                          <span className=\"progress-group-text\">\n                            {label}\n                          </span>\n                        </div>\n                        <div className=\"progress-group-bars\">\n                          <Progress className=\"progress-xs\" color=\"info\" value={(counter1 * 3) > 100 ? 100 : counter1 * 3} />\n                          <Progress className=\"progress-xs\" color=\"danger\" value={(counter2 * 3) > 100 ? 100 : counter2 * 3} />\n                        </div>\n                      </div>)\n                    })\n                  }\n\n\n                  <div className=\"legend text-center\">\n                    <small>\n                      <sup className=\"px-1\"><Badge pill color=\"info\">&nbsp;</Badge></sup>\n                      Clients\n                      &nbsp;\n                      <sup className=\"px-1\"><Badge pill color=\"danger\">&nbsp;</Badge></sup>\n                      Agendas\n                    </small>\n                  </div>\n                </Col>\n                <Col xs=\"12\" md=\"6\" xl=\"6\">\n                  <Row>\n                    <Col sm=\"6\">\n                      <div className=\"callout callout-warning\">\n                        <small className=\"text-muted\">Tasks</small>\n                        <br />\n                        <strong className=\"h4\">{clientTaskCounter ? clientTaskCounter : 0}</strong>\n                        <div className=\"chart-wrapper\">\n                          <Line data={clientTaskData ? clientTaskData : makeSparkLineData(2, brandWarning)} options={sparklineChartOpts} width={100} height={30} />\n                        </div>\n                      </div>\n                    </Col>\n                    <Col sm=\"6\">\n                      <div className=\"callout callout-success\">\n                        <small className=\"text-muted\">Groups</small>\n                        <br />\n                        <strong className=\"h4\">{userGroupCounter ? userGroupCounter : 0}</strong>\n                        <div className=\"chart-wrapper\">\n                          <Line data={userGroupData ? userGroupData : makeSparkLineData(3, brandSuccess)} options={sparklineChartOpts} width={100} height={30} />\n                        </div>\n                      </div>\n                    </Col>\n                  </Row>\n                  <hr className=\"mt-0\" />\n                  {clientTaskData && userGroupData &&\n                    clientTaskData.labels.map((label, key) => {\n                      const counter1 = clientTaskData.datasets[0].data[key];\n                      const counter2 = userGroupData.datasets[0].data[key];\n                      return (<div className=\"progress-group mb-4\" key={key}>\n                        <div className=\"progress-group-prepend\">\n                          <span className=\"progress-group-text\">\n                            {label}\n                          </span>\n                        </div>\n                        <div className=\"progress-group-bars\">\n                          <Progress className=\"progress-xs\" color=\"warning\" value={(counter1 * 3) > 100 ? 100 : counter1 * 3} />\n                          <Progress className=\"progress-xs\" color=\"success\" value={(counter2 * 3) > 100 ? 100 : counter2 * 3} />\n                        </div>\n                      </div>)\n                    })\n                  }\n                  <div className=\"legend text-center\">\n                    <small>\n                      <sup className=\"px-1\"><Badge pill color=\"warning\">&nbsp;</Badge></sup>\n                      Tasks\n                      &nbsp;\n                      <sup className=\"px-1\"><Badge pill color=\"success\">&nbsp;</Badge></sup>\n                      Groups\n                    </small>\n                  </div>\n                </Col>\n              </Row>\n              <br />\n              {/* <Table hover responsive className=\"table-outline mb-0 d-none d-sm-table\">\n                  <thead className=\"thead-light\">\n                    <tr>\n                      <th className=\"text-center\"><i className=\"icon-people\"></i></th>\n                      <th>User</th>\n                      <th className=\"text-center\">Country</th>\n                      <th>Usage</th>\n                      <th className=\"text-center\">Payment Method</th>\n                      <th>Activity</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/1.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-success\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Yiorgos Avraamu</div>\n                        <div className=\"small text-muted\">\n                          <span>New</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-us h4 mb-0\" title=\"us\" id=\"us\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>50%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"success\" value=\"50\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-cc-mastercard\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>10 sec ago</strong>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/2.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-danger\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Avram Tarasios</div>\n                        <div className=\"small text-muted\">\n\n                          <span>Recurring</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-br h4 mb-0\" title=\"br\" id=\"br\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>10%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"info\" value=\"10\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-cc-visa\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>5 minutes ago</strong>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/3.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-warning\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Quintin Ed</div>\n                        <div className=\"small text-muted\">\n                          <span>New</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-in h4 mb-0\" title=\"in\" id=\"in\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>74%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"warning\" value=\"74\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-cc-stripe\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>1 hour ago</strong>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/4.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-secondary\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Enéas Kwadwo</div>\n                        <div className=\"small text-muted\">\n                          <span>New</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-fr h4 mb-0\" title=\"fr\" id=\"fr\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>98%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"danger\" value=\"98\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-paypal\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>Last month</strong>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/5.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-success\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Agapetus Tadeáš</div>\n                        <div className=\"small text-muted\">\n                          <span>New</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-es h4 mb-0\" title=\"es\" id=\"es\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>22%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"info\" value=\"22\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-google-wallet\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>Last week</strong>\n                      </td>\n                    </tr>\n                    <tr>\n                      <td className=\"text-center\">\n                        <div className=\"avatar\">\n                          <img src={'assets/img/avatars/6.jpg'} className=\"img-avatar\" alt=\"admin@bootstrapmaster.com\" />\n                          <span className=\"avatar-status badge-danger\"></span>\n                        </div>\n                      </td>\n                      <td>\n                        <div>Friderik Dávid</div>\n                        <div className=\"small text-muted\">\n                          <span>New</span> | Registered: Jan 1, 2015\n                      </div>\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"flag-icon flag-icon-pl h4 mb-0\" title=\"pl\" id=\"pl\"></i>\n                      </td>\n                      <td>\n                        <div className=\"clearfix\">\n                          <div className=\"float-left\">\n                            <strong>43%</strong>\n                          </div>\n                          <div className=\"float-right\">\n                            <small className=\"text-muted\">Jun 11, 2015 - Jul 10, 2015</small>\n                          </div>\n                        </div>\n                        <Progress className=\"progress-xs\" color=\"success\" value=\"43\" />\n                      </td>\n                      <td className=\"text-center\">\n                        <i className=\"fa fa-cc-amex\" style={{ fontSize: 24 + 'px' }}></i>\n                      </td>\n                      <td>\n                        <div className=\"small text-muted\">Last login</div>\n                        <strong>Yesterday</strong>\n                      </td>\n                    </tr>\n                  </tbody>\n                </Table>*/}\n            </CardBody>\n          </Card>\n        </Col>\n      </Row>\n    </div >\n  );\n}\n\n\nexport default withRouter(Dashboard);\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\RideEarnings\\index.js",["349"],"import React, { useEffect, useState } from 'react';\nimport { Card, CardBody, CardHeader, Col, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { toast, ToastContainer } from 'react-toastify';\nimport './style.css';\nimport { apiService } from '../../../_services/api.service';\nimport config from '../../../_config';\nimport io from 'socket.io-client';\nconst CountCard = ({ count, title, color }) => (\n    <Col xs=\"12\" sm=\"6\" lg=\"4\">\n        <Card className={`text-white bg-${color}`}>\n            <CardBody className=\"pb-4\">\n                <div className=\"text-value\" >${count}</div>\n                <div>{title}</div>\n            </CardBody>\n        </Card>\n    </Col>\n)\n\nconst RideTable = ({ data }) => {\n    const onFeeReceived = (i) => {\n        let mData = JSON.parse(JSON.stringify(data[i]));\n        mData.serviceFeeReceived = true;\n        mData[\"changesFromAdmin\"] = true;\n        apiService.update('rides', mData, mData._id);\n    }\n    const onEarningPaid = (i) => {\n        let mData = JSON.parse(JSON.stringify(data[i]));\n        mData.driverEarningPaid = true;\n        mData[\"changesFromAdmin\"] = true;\n        apiService.update('rides', mData, mData._id);\n    }\n    return (\n        <table className=\"table\">\n            <thead>\n                <tr>\n                    <th>Distance</th>\n                    <th>Duration</th>\n                    <th>Total Fare</th>\n                    <th>Service Fee</th>\n                    <th>Driver Earning</th>\n                    <th>Payment Type</th>\n                    <th></th>\n                </tr>\n            </thead>\n            <tbody>\n                {\n                    data.map((obj, i) => <tr key={i}>\n                        <td>{obj.tripDistance} Miles</td>\n                        <td>{obj.tripDistanceTime} Mints</td>\n                        <td>${obj.fareTotal}</td>\n                        <td>${obj.serviceFee}</td>\n                        <td>${obj.earningDriver}</td>\n                        <td>{obj.paymentType}</td>\n                        {\n                            !obj.serviceFeeReceived && <td>\n                                <button className=\"btn btn-success btn-sm\" onClick={() => onFeeReceived(i)}>\n                                    Fee Received\n                            </button>\n                            </td>\n                        }\n                        {\n                            !obj.driverEarningPaid && <td>\n                                <button className=\"btn btn-success btn-sm\" onClick={() => onEarningPaid(i)}>\n                                    Earning Paid\n                            </button>\n                            </td>\n                        }\n                    </tr>)\n                }\n            </tbody>\n        </table>\n    )\n}\nconst RideEarnings = () => {\n    const [rides, setRide] = useState(null);\n    const [count, setCount] = useState({\n        totalFare: 0,\n        serviceFee: 0,\n        earningDriver: 0\n    });\n    useEffect(() => {\n        fetchRide();\n\n        let socket = io(config.baseUrl, config.socketHeader);\n        socket.on(\"new-ride\", fetchRide);\n        socket.on(\"update-ride\", fetchRide);\n        socket.on(\"delete-ride\", fetchRide);\n    }, []);\n\n    const fetchRide = () => {\n        apiService.filter('rides', { query: { status: \"Completed\", } }).then(r => {\n            setRide(r);\n\n            let totalFare = 0, serviceFee = 0, earningDriver = 0\n            r.forEach(mr => {\n                totalFare += mr.fareTotal;\n                serviceFee += (mr.serviceFeeReceived) ? mr.serviceFee : 0;\n                earningDriver += (mr.driverEarningPaid) ? mr.earningDriver : 0;\n            });\n            setCount({\n                totalFare,\n                serviceFee,\n                earningDriver\n            })\n        })\n    }\n    return (\n        <div>\n            <Row>\n                <Col lg={12}>\n                    <Card>\n                        <CardHeader>\n                            <div className=\"row\">\n                                <ToastContainer />\n                                <div className=\"col-10\">\n                                    <strong><i className=\"fa fa-usd pr-1\"></i>Ride Earnings</strong>\n                                </div>\n                                <div className=\"col-2\">\n                                </div>\n                            </div>\n                        </CardHeader>\n                        <CardBody>\n                            <div className=\"\">\n                                <p>\n                                    Completed Ride Earning Details.\n                                </p>\n                            </div>\n                            <div className=\"row\">\n                                <CountCard count={count.totalFare} title=\"Total Fares\" color=\"primary\" />\n                                <CountCard count={count.serviceFee} title=\"Received Service Fee\" color=\"warning\" />\n                                <CountCard count={count.earningDriver} title=\"Driver Earnings Paid\" color=\"danger\" />\n                            </div>\n\n                            {rides ? rides.length > 0 ?\n                                <div className=\"row\">\n                                    <div className=\"col-sm-12 mb-4\">\n                                        <h5>Clear Rides</h5>\n                                        <RideTable data={rides.filter(r => r.driverEarningPaid && r.serviceFeeReceived)} />\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <h5>Un Paid Earnings To Drivers</h5>\n                                        <RideTable data={rides.filter(r => !r.driverEarningPaid)} />\n                                    </div>\n                                    <div className=\"col-sm-6\">\n                                        <h5>Un Paid Service Fee From Drivers</h5>\n                                        <RideTable data={rides.filter(r => !r.serviceFeeReceived)} />\n                                    </div>\n                                </div>\n                                :\n                                <div>No ride data found</div>\n                                :\n                                <div>Loading...</div>\n                            }\n\n                        </CardBody>\n                    </Card>\n                </Col>\n            </Row>\n        </div>\n    );\n};\n\nfunction mapStateToProps(state) {\n    const { authentication } = state;\n    // const {token, admin} = authentication;\n    return {\n        authentication\n    };\n}\n\nconst connected = connect(mapStateToProps)(RideEarnings);\nexport { connected as RideEarnings };","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\DistributeProfit\\index.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\userCustomNotification.actions.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\user.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_common\\notification.js",["350"],"import React from 'react';\nimport { ToastContainer } from 'react-toastify';\n\nconst Notification = ({ children, type = 'link', onCloseBtnClick = null }) => (\n  <div className={`alert alert-${type}`} >\n    {typeof onCloseBtnClick === 'function' ? (\n      <i className=\"fas fa-times\" style={{color:'red'}} onClick={onCloseBtnClick}></i>\n    ) : null}\n    {children}\n  </div>\n);\n\nexport default Notification;\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_common\\field.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\settings.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\alert.constants.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\userCustomNotification.constants.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_constants\\user.constants.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_actions\\alert.actions.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\dashboard.service.js",[],["351","352"],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\userCustomNotification.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\views\\Widgets\\Widget03.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\UserCustomNotifications\\UserCustomNotifications.js",["353","354","355","356","357","358"],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_services\\adminNotification.service.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\Admin\\AdminManage.js",["359","360","361","362"],"import React, { Component } from 'react';\nimport { Card, CardBody, CardHeader, Col, Row, Table, FormGroup, Input } from 'reactstrap';\nimport { adminActions } from '../../../_actions/admin.actions';\nimport { adminService } from '../../../_services/admin.service';\nimport { connect } from 'react-redux';\nimport config from '../../../_config';\nimport validate from 'validate.js';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Field from '../../../_common/field';\nimport Notification from '../../../_common/notification';\nconst defaultImage = \"https://png.pngtree.com/element_our/png/20181206/users-vector-icon-png_260862.jpg\"; \nclass AdminManage extends Component {\n    state = {\n        adminObj: {\n            \"name\": \"\",\n            \"email\": \"\",\n            \"phoneNo\": \"\",\n            \"password\": \"\",\n            \"profileImage\": \"\",\n        },\n        errors: {},\n        formError: null,\n        loaded: 0,\n        pageLoading: true\n    }\n\n    componentDidMount() {\n\n        setTimeout(() => {\n            this.setState({ adminObj: this.props.admin })\n        }, 800)\n\n    }\n    getImageURL(image) {\n        return image ? image.includes(\"http\") || image.includes(\"base64\") ? image : config.baseUrl + image : defaultImage;\n    }\n    static get RULES() {\n        return {\n            name: {\n                presence: {\n                    allowEmpty: false\n                },\n\n            },\n            phoneNo: {\n                presence: {\n                    allowEmpty: true\n                }\n            },\n            email: {\n                presence: {\n                    allowEmpty: false\n                },\n                email: {\n                    message: \"^Invalid Email\"\n                }\n            },\n        };\n    }\n    handleChange({ target }) {\n        const { name, value } = target;\n        const errors = validate({ [name]: value }, { [name]: AdminManage.RULES[name] });\n        let obj = this.fillInObject(Object.assign({}, this.state.adminObj), name, value);\n        this.setState({\n            adminObj: obj,\n            errors: Object.assign(\n                {},\n                this.state.errors,\n                errors ? errors : { [name]: undefined }\n            )\n        });\n    }\n    fillInObject(obj, name, value) {\n        obj[name] = value;\n        return obj;\n    }\n    checkMimeType = (event) => {\n        //getting file object\n        let files = event.target.files\n        //define message container\n        let err = []\n        // list allow mime type\n        const types = ['image/png', 'image/jpeg', 'image/gif']\n        // loop access array\n        for (var x = 0; x < files.length; x++) {\n            // compare file type find doesn't matach\n            if (types.every(type => files[x].type !== type)) {\n                // create error message and assign to container   \n                err[x] = files[x].type + ' is not a supported format\\n';\n            }\n        };\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n            // discard selected file\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return (err.length > 0) ? false : true;\n    }\n    maxSelectFile = (event) => {\n        let files = event.target.files\n        if (files.length > 1) {\n            const msg = 'Only 1 images can be uploaded at a time'\n            event.target.value = null\n            toast.warn(msg)\n            return false;\n        }\n        return true;\n    }\n    checkFileSize = (event) => {\n        let files = event.target.files\n        let size = 2000000\n        let err = [];\n        for (var x = 0; x < files.length; x++) {\n            if (files[x].size > size) {\n                err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n            }\n        };\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n            // discard selected file\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return true;\n    }\n    onChangeHandler = event => {\n        var files = event.target.files;\n        if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n            try {\n\n\n                let reader = new FileReader();\n                reader.readAsDataURL(files[0]);\n                reader.onload = (e) => {\n                    let file = e.target.result;\n\n                    let obj = this.fillInObject(Object.assign({}, this.state.adminObj), \"profileImage\", file);\n                    obj.selectedImage = files[0];\n\n                    this.setState({\n                        adminObj: obj\n                    });\n                }\n            } catch (error) {\n                toast.error('Invalid Image')\n            }\n        }\n    }\n    handleSubmit(e) {\n        e.preventDefault();\n        const errors = validate(this.state.adminObj, AdminManage.RULES);\n        debugger;\n        if (errors) {\n            toast.error(\"Form data is Invalid\")\n            return this.setState({ formError: null, errors });\n        }\n\n        this.setState({ isLoading: true }, () => {\n\n            let form = new FormData();\n            if (this.state.adminObj.selectedImage) {\n                form.append('image', this.state.adminObj.selectedImage)\n            }\n            form.append('name', this.state.adminObj.name);\n            form.append('email', this.state.adminObj.email);\n            form.append('phoneNo', this.state.adminObj.phoneNo);\n            form.append('password', this.state.adminObj.password);\n            if (this.state.adminObj._id) {\n                adminService.update(form, this.state.adminObj._id).then(res => {\n                    this.setState({ isLoading: false }, () => {\n                        toast.success(\"Profile Updated\");\n                        this.props.dispatch(adminActions.getCurrentAdmin(this.props.history));\n                    })\n                }).catch(err => {\n                    this.setState({ isLoading: false }, () => {\n                        toast.error(err.message);\n                    });\n                })\n\n            }\n        })\n    }\n    render() {\n        return (\n            <Row>\n                <Col lg={8}>\n                    <Card>\n                        <CardHeader>\n                            <strong><i className=\"fa fa-user pr-1\"></i>Admin Profile Settings</strong>\n                        </CardHeader>\n                        {this.props.admin &&\n                            <CardBody>\n\n                                <div className=\"row\">\n                                    <div className=\"col-md-6\">\n                                        <div className=\"text-center\">\n                                            <img src={this.getImageURL(this.state.adminObj.profileImage)} style={{ height: 'auto', width: '100%' }} alt=\"Admin\" />\n\n                                        </div>\n                                        <div className=\"form-group files\">\n                                            <label>Upload Profile Image </label>\n                                            <input type=\"file\" className=\"form-control\" name=\"file\" onChange={this.onChangeHandler} />\n                                        </div>\n                                        <div className=\"form-group\">\n                                            <ToastContainer />\n                                            {/* <Progress max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded, 2)}%</Progress> */}\n                                        </div>\n                                    </div>\n                                    <div className=\"col-md-6\">\n                                        <form onSubmit={e => this.handleSubmit(e)} >\n                                            {this.state.formError ? (\n                                                <Notification type=\"danger\" onCloseBtnClick={e => this.setState({ formError: null })}>\n                                                    {this.state.formError}\n                                                </Notification>\n                                            ) : null}\n\n\n\n                                            <Field label=\"Name\" errors={this.state.errors.name}>\n                                                <input\n                                                    name=\"name\"\n                                                    type=\"text\"\n                                                    placeholder=\"Name\"\n                                                    value={this.state.adminObj.name}\n                                                    disabled={this.state.isLoading}\n                                                    onChange={e => this.handleChange(e)}\n                                                />\n                                            </Field>\n                                            <Field label=\"Email\" errors={this.state.errors.email}>\n                                                <input\n                                                    name=\"email\"\n                                                    type=\"email\"\n                                                    placeholder=\"Email\"\n                                                    value={this.state.adminObj.email}\n                                                    disabled={this.state.isLoading}\n                                                    onChange={e => this.handleChange(e)}\n                                                />\n                                            </Field>\n                                            <Field label=\"Phone Number\" errors={this.state.errors.phoneNo}>\n                                                <input\n                                                    name=\"phoneNo\"\n                                                    type=\"text\"\n                                                    placeholder=\"Email\"\n                                                    value={this.state.adminObj.phoneNo}\n                                                    disabled={this.state.isLoading}\n                                                    onChange={e => this.handleChange(e)}\n                                                />\n                                            </Field>\n                                            <Field label=\"New Password\" errors={this.state.errors.password}>\n                                                <input\n                                                    name=\"password\"\n                                                    type=\"password\"\n                                                    placeholder=\"New Password\"\n                                                    value={this.state.adminObj.password}\n                                                    disabled={this.state.isLoading}\n                                                    onChange={e => this.handleChange(e)}\n                                                />\n                                            </Field>\n\n                                            <button className=\"btn btn-success btn-block\" disabled={this.state.isLoading}>Save</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </CardBody>\n                        }\n                    </Card>\n                </Col>\n            </Row >\n        );\n    }\n}\nfunction mapStateToProps(state) {\n    const { authentication } = state;\n    const { token, admin } = authentication;\n    return {\n        token,\n        admin\n    };\n}\n\nconst connected = connect(mapStateToProps)(AdminManage);\nexport { connected as AdminManage }; ","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\CRUD\\index.js",["363"],"import React, { Component } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Card, CardBody, CardHeader, Col, Row, Table } from \"reactstrap\";\nimport { apiService } from \"../../../_services/api.service\";\nimport { connect } from \"react-redux\";\nimport PaginationComponent from \"react-reactstrap-pagination\";\nimport Field from '../../../_common/field';\nimport pluralize from \"pluralize\";\nimport ImageHelper from \"../../../_helpers/imageHelper\";\nimport Notification from \"../../../_common/notification\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport validate from 'validate.js';\n// import { settingsService } from \"../../../_services/settings.service\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DateTimePicker from 'react-datetime-picker';\nimport ImageUploader from \"../../../_ui_components/ImageUploader\";\nimport ParentDropDown from \"../../../_ui_components/ParentDropDown\";\nimport config from \"../../../_config\";\nimport io from 'socket.io-client';\nimport ParentCheckList from \"../../../_ui_components/ParentCheckList\";\nimport MultipleImageUploader from \"../../../_ui_components/MultipleImageUploader\";\nimport AddressLocationField from \"../../../_ui_components/AddressLocationField\";\nimport RTEField from \"../../../_ui_components/RTEField\";\nimport GoogleMapComponent from \"../../../_ui_components/AddressLocationField/GoogleMapComponent\";\nimport { GoogleMap, Marker } from \"react-google-maps\";\nimport PasswordField from \"../../../_ui_components/PasswordField\";\nconst googleMapURL = `https://maps.googleapis.com/maps/api/js?key=${config.googleMapAPIKey}&v=3.exp&libraries=geometry,drawing,places`\n\n\n// import { useLocation } from 'react-router-dom'\n\n\n// eslint-disable-next-line no-extend-native\nArray.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\nclass DataTable extends Component {\n  state = {\n    activePagination: {\n      pageLoading: true,\n      selectedPage: 1,\n      pageSize: 10,\n      maxPaginationNumbers: 9\n    },\n    searching: false,\n    modelType: null,\n    list: [],\n    listFiltered: [],\n    route: \"\",\n    loaded: false\n  };\n  componentDidMount() {\n    let { location } = this.props;\n\n    let route = pluralize.plural(location.pathname.split(\"/\")[1]);\n    this.setState({ route });\n\n    apiService.type(route).then(m => {\n      this.setState({ modelType: m });\n    })\n\n    this.fetchData(route);\n\n\n\n    let socket = io(config.baseUrl, config.socketHeader);\n    apiService.type(route).then(modelType => {\n      socket.on(\"new-\" + pluralize.singular(modelType.modelDisplayName).toLowerCase(), (m) => {\n        this.fetchData(route);\n      });\n      socket.on(\"update-\" + pluralize.singular(modelType.modelDisplayName).toLowerCase(), (m) => {\n        this.fetchData(route);\n      });\n      socket.on(\"delete-\" + pluralize.singular(modelType.modelDisplayName).toLowerCase(), (m) => {\n        this.fetchData(route);\n      });\n    });\n\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    let { location } = nextProps;\n\n    let route = pluralize.plural(location.pathname.split(\"/\")[1]);\n    this.setState({ route });\n\n    apiService.type(route).then(m => {\n      this.setState({ modelType: m });\n    })\n\n    this.fetchData(route);\n  }\n  fetchData = (route) => {\n    const query = new URLSearchParams(this.props.location.search);\n    if (query.get(\"filter\")) {\n      let filterQuery = JSON.parse(JSON.stringify(query.get(\"filter\")));\n      apiService.filter(route, { query: JSON.parse(filterQuery), sortQuery: { dateTime: - 1 } },).then(list => {\n        this.setState({ list, listFiltered: list, loaded: true })\n      });\n\n    } else {\n      apiService.getAll(route).then(list => {\n        this.setState({ list, listFiltered: list, loaded: true })\n      });\n    }\n  }\n  doSearch = ({ target }) => {\n    if (!this.state.searching) {\n\n      this.setState({ searching: true })\n      const { value } = target;\n      let tempTistFiltered = this.state.list;\n      // let listFiltered = JSON.parse(JSON.stringify(this.state.list));\n      let searchText = value.toLowerCase();\n      let newTempList = [];\n      debugger;\n      if (tempTistFiltered && tempTistFiltered.length > 0) {\n        tempTistFiltered.forEach(item => {\n          try {\n            Object.keys(this.state.modelType.bluePrint).forEach((attribute, key) => {\n              if (!this.state.modelType.bluePrint[attribute].hidden) {\n                if ((this.state.modelType.bluePrint[attribute].dataType === \"String\" ||\n                  this.state.modelType.bluePrint[attribute].dataType === \"EnumDropDown\") &&\n                  item[attribute] && item[attribute].toLowerCase().includes(searchText)) {\n                  // console.log(item[attribute].toLowerCase());\n                  // newTempList.push(item);\n                  throw Object.assign(new Error({ status: false }));\n                } else if (this.state.modelType.bluePrint[attribute].dataType === \"Number\" &&\n                  item[attribute] && item[attribute].toString().toLowerCase().includes(searchText)) {\n                  throw Object.assign(new Error({ status: false }));\n                }\n              }\n            })\n          } catch (error) {\n            newTempList.push(item);\n          }\n\n\n        })\n\n      }\n      this.setState({ listFiltered: newTempList, searching: false })\n    }\n  }\n  handleSelectedActivePage = selectedPage => {\n    let activePagination = this.state.activePagination;\n    activePagination.selectedPage = selectedPage;\n    this.setState({ activePagination });\n  };\n  generateNavigateParams = (params, obj) => {\n    debugger;\n    let pramsObj = {}\n    params.forEach(p => {\n      pramsObj[p.name] = p.field ? obj[p.field] : p.value\n    })\n    return JSON.stringify(pramsObj);\n  }\n  restrictNavigationParams = (restrict, obj) => {\n    let allow = restrict ? false : true;\n    restrict && restrict.forEach((r, i) => {\n      if (r.value === obj[r.field]) {\n        allow = true;\n      }\n    })\n    return allow;\n  }\n  render() {\n    // const list = categoriesData\n    const {\n      // list,\n      listFiltered, modelType, route, loaded } = this.state;\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <Col xl={12}>\n            {modelType &&\n              <Card>\n                <CardHeader>\n                  <i className={modelType.icon}></i> {pluralize.plural(modelType.modelDisplayName)}\n                  {modelType.permission && modelType.permission.create &&\n                    <Link\n                      to={`/${pluralize.singular(route)}/add`}\n                      className=\"btn btn-primary btn-sm\"\n                      style={{ float: \"right\" }}\n                    >\n                      Add New\n                    </Link>\n                  }\n                </CardHeader>\n                <CardBody>\n                  <Field>\n                    <input name=\"search\" type=\"text\" placeholder=\"Search...\" disabled={this.state.searching} onChange={e => this.doSearch(e)} />\n                  </Field>\n                  <Table responsive hover>\n                    <thead>\n                      <tr>\n                        {Object.keys(modelType.bluePrint).map((th, key) => {\n                          if (modelType.bluePrint[th].displayOnHeader && !modelType.bluePrint[th].hidden)\n                            return <th scope=\"col\" key={key}>{modelType.bluePrint[th].label}</th>\n                          else\n                            return null;\n\n                        })}\n                        <th key={100} style={{ width: 100 }}>Actions</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n\n                      {loaded && listFiltered.length == 0 && <tr > <td colspan=\"12\" className=\"text-center\">No {pluralize.plural(modelType.modelDisplayName)} found!</td> </tr>}\n                      {listFiltered\n                        .slice(\n                          (this.state.activePagination.selectedPage - 1) *\n                          this.state.activePagination.pageSize,\n                          this.state.activePagination.selectedPage *\n                          this.state.activePagination.pageSize\n                        )\n                        .map((formObj, index) => (\n                          <tr key={formObj._id.toString()}>\n                            {\n                              Object.keys(modelType.bluePrint).map((td, key) => {\n                                if (modelType.bluePrint[td].displayOnHeader && !modelType.bluePrint[td].hidden)\n                                  if (modelType.bluePrint[td].dataType === \"String\" ||\n                                    modelType.bluePrint[td].dataType === \"EnumDropDown\" ||\n                                    modelType.bluePrint[td].dataType === \"Number\" ||\n                                    modelType.bluePrint[td].dataType === \"AddressBar\")\n                                    return <td key={key}>{formObj[td]}</td>\n\n\n\n                                  else if (modelType.bluePrint[td].dataType === \"Image\")\n                                    return <td key={key}>\n                                      <img src={ImageHelper.getImageURL(formObj[td])} alt={td} style={{ height: 70 }} />\n                                    </td>\n\n                                  else if (modelType.bluePrint[td].dataType === \"Boolean\")\n                                    return <td key={key}>{formObj[td] ? \"Yes\" : \"No\"}</td>\n\n                                  else if (modelType.bluePrint[td].dataType === \"ParentDropDown\")\n                                    return <td key={key}>{formObj[td + \"Obj\"] ? formObj[td + \"Obj\"][modelType.bluePrint[td].displayfield] : \"Not Selected\"}</td>\n\n                                  else if (modelType.bluePrint[td].dataType === \"Date\" || modelType.bluePrint[td].dataType === \"DateTime\" || modelType.bluePrint[td].dataType === \"DefaultDate\")\n                                    return <td key={key}>{new Date(formObj[td]).toLocaleDateString()} {new Date(formObj[td]).toLocaleTimeString()}</td>\n                                  else\n                                    return null;\n                                else\n                                  return null;\n                              })\n\n                            }\n\n\n                            <td>\n                              <Link to={`/${route}/detail/${formObj._id}`} className=\"mr-2\"> <i className=\"fa fa-info\"></i></Link>\n                              {modelType.permission && modelType.permission.edit &&\n                                <Link to={`/${pluralize.singular(route)}/edit/${formObj._id}`} className=\"text-warning\">\n                                  <i className=\"fa fa-edit\"></i>\n                                </Link>\n                              }\n                              {modelType.permission && modelType.permission.delete &&\n                                <Link to={`/${route}/delete/${formObj._id}`} className=\"ml-2 text-danger\">\n                                  <i className=\"icon-trash\"></i>\n                                </Link>\n                              }\n\n                              {modelType.actions && modelType.actions.map(action => this.restrictNavigationParams(action.restrict, formObj) && <div className=\"row\">\n                                <Link to={`/${action.route}?filter=${this.generateNavigateParams(action.params, formObj)}`} className=\"ml-2 text-primary\">\n                                  {action.value}\n                                </Link>\n                              </div>\n                              )}\n                            </td>\n                          </tr>\n                        ))}\n                    </tbody>\n                  </Table>\n                  <PaginationComponent\n                    totalItems={listFiltered.length}\n                    pageSize={this.state.activePagination.pageSize}\n                    onSelect={this.handleSelectedActivePage}\n                    maxPaginationNumbers={\n                      this.state.activePagination.maxPaginationNumbers\n                    }\n                    activePage={this.state.activePagination.selectedPage}\n                  />\n                </CardBody>\n              </Card>\n            }\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nclass Detail extends Component {\n  state = {\n    formObj: null,\n    modelType: null,\n    loading: true,\n    status: false,\n    delete: false\n  }\n\n  componentDidMount() {\n    const { pathname } = this.props.location;\n    let { location } = this.props;\n\n    let route = pluralize.plural(location.pathname.split(\"/\")[1]);\n    this.setState({ route });\n\n    apiService.type(route).then(m => {\n      this.setState({ modelType: m });\n    })\n    apiService.getSingle(route, this.props.match.params.id).then(formObj => {\n      this.setState({ formObj, status: formObj.status, delete: pathname.includes(\"delete\"), loading: false })\n    }).catch(e => {\n      console.log(e.response)\n    })\n  }\n\n\n  render() {\n    const { formObj, loading, modelType, route } = this.state;\n    return (\n      <div>\n        {\n          loading ? <span><i className=\"text-muted icon-wait\"></i> Loading...</span> :\n            formObj && modelType ? <div className=\"animated fadeIn\" >\n              <Row>\n                <Col lg={8}>\n                  <Card>\n                    <CardHeader>\n                      <strong><i className={`${modelType.icon} pr-1`}></i>{modelType.modelDisplayName}</strong>\n                      <br />\n                      <Link to={`/${route}`}>Back to List</Link>\n                    </CardHeader>\n                    <CardBody>\n                      <Table striped hover>\n                        <tbody>\n                          {\n                            Object.keys(modelType.bluePrint).map((td, key) => {\n                              if (!modelType.bluePrint[td].hidden && modelType.bluePrint[td].dataType) {\n                                return <tr key={key}>\n                                  <td style={{ width: '30%' }}>{modelType.bluePrint[td].label}</td>\n\n                                  {(modelType.bluePrint[td].dataType === \"String\" ||\n                                    modelType.bluePrint[td].dataType === \"EnumDropDown\" ||\n                                    modelType.bluePrint[td].dataType === \"Number\") &&\n                                    <td key={key}>{formObj[td]}</td>\n                                  }\n                                  {(modelType.bluePrint[td].dataType === \"PasswordHash\") &&\n                                    <td key={key} >\n                                      *******\n                                  </td>\n                                  }\n\n                                  {(modelType.bluePrint[td].dataType === \"RichText\") &&\n                                    <td key={key} >\n                                      <div dangerouslySetInnerHTML={{ __html: formObj[td] }}></div>\n                                    </td>\n                                  }\n                                  {(modelType.bluePrint[td].dataType === \"AddressBar\") &&\n                                    <td key={key}>\n                                      <div classNme=\"row\">\n                                        <div className=\"col-sm-12\">{formObj[td]}</div>\n                                        <div className=\"col-sm-12 mt-2\">\n                                          <GoogleMapComponent\n                                            googleMapURL={googleMapURL}\n                                            loadingElement={<div style={{ height: `100%` }} />}\n                                            containerElement={<div style={{ height: `300px` }} />}\n                                            mapElement={<div style={{ height: `100%` }} />}>\n                                            <GoogleMap\n                                              defaultZoom={config.mapZoom}\n                                              defaultCenter={{ lat: formObj[td + \"Location\"].coordinates[0], lng: formObj[td + \"Location\"].coordinates[1] }}\n                                            >\n                                              <Marker position={{ lat: formObj[td + \"Location\"].coordinates[0], lng: formObj[td + \"Location\"].coordinates[1] }} />\n                                            </GoogleMap>\n                                          </GoogleMapComponent>\n                                        </div>\n                                      </div>\n                                    </td>\n                                  }\n\n                                  {(modelType.bluePrint[td].dataType === \"Image\") && <td key={key}>\n                                    <img src={ImageHelper.getImageURL(formObj[td])} alt={td} style={{ height: 100 }} />\n                                  </td>}\n\n                                  {(modelType.bluePrint[td].dataType === \"MultipleImages\") && <td key={key}>\n                                    <div className=\"row\">\n                                      {formObj[td].map(item => <div className=\"col-sm-4\">\n                                        <img src={ImageHelper.getImageURL(item.path)} alt={td} style={{ width: '100%', height: 'auto' }} />\n                                      </div>\n                                      )}\n                                    </div>\n                                  </td>}\n\n                                  {(modelType.bluePrint[td].dataType === \"Boolean\") &&\n                                    <td key={key}>{formObj[td] ? \"Yes\" : \"No\"}</td>\n                                  }\n\n\n                                  {(modelType.bluePrint[td].dataType === \"ParentDropDown\") &&\n                                    <td key={key}>{formObj[td + \"Obj\"]?formObj[td + \"Obj\"][modelType.bluePrint[td].displayfield]:\"Not Selected\"}</td>\n                                  }\n\n                                  {(modelType.bluePrint[td].dataType === \"ParentCheckList\") &&\n                                    <td key={key}>\n                                      {formObj[td].map(li => <li>\n                                        {li.obj[modelType.bluePrint[td].displayfield]}\n                                      </li>)}\n                                    </td>\n                                  }\n\n                                  {(modelType.bluePrint[td].dataType === \"Date\" || modelType.bluePrint[td].dataType === \"DateTime\" || modelType.bluePrint[td].dataType === \"DefaultDate\") &&\n                                    <td key={key}>{new Date(formObj[td]).toLocaleDateString()} {new Date(formObj[td]).toLocaleTimeString()}</td>\n                                  }\n\n                                </tr>\n                              } else\n                                return null;\n                            })\n                          }\n\n                          {this.state.delete &&\n                            <tr>\n                              <td>\n                                Comfirmation:\n                              </td>\n                              <td>\n                                <button className=\"btn btn-danger btn-sm\" type=\"button\" onClick={() => { apiService.delete(route, formObj._id).then(d => { this.props.history.push(`/${route}`) }) }}>\n                                  <i className=\"icon-trash\"></i> Delete\n                                </button>\n                                <button className=\"btn btn-info btn-sm text-white ml-1\" type=\"button\" onClick={() => { this.props.history.push(`/${route}`) }}>Cancel</button>\n                              </td>\n                            </tr>\n                          }\n                        </tbody>\n                      </Table>\n                    </CardBody>\n                  </Card>\n                </Col>\n\n\n              </Row>\n            </div >\n              : <span><i className=\"text-muted icon-ban\"></i> Not found</span>\n        }\n      </div>\n    )\n\n  }\n}\n\nclass Manage extends Component {\n  state = {\n    formObj: null,\n    validationRule: null,\n    errors: {},\n    formError: null,\n    loaded: 0,\n    pageLoading: true,\n    isLoading: true,\n    modelType: null,\n    single: false\n  }\n\n  componentDidMount() {\n    let { location } = this.props;\n    let route = pluralize.plural(location.pathname.split(\"/\")[1]);\n    this.setState({ route });\n\n    const query = new URLSearchParams(this.props.location.search);\n    if (query.get(\"single\")) {\n      this.setState({ single: true })\n    }\n\n\n    apiService.type(route).then(modelType => {\n      //Define Validation Rule\n      let validationRule = {};\n      Object.keys(modelType.bluePrint).forEach((attribute, key) => {\n        if (!modelType.bluePrint[attribute].hidden && (modelType.bluePrint[attribute].dataType !== \"Boolean\" || modelType.bluePrint[attribute].dataType !== \"DefaultDate\")) {\n\n          if (modelType.bluePrint[attribute].required) {\n            validationRule[attribute] = { presence: { allowEmpty: false } }\n          }\n          if (modelType.bluePrint[attribute].dataType === \"Number\") {\n            validationRule[attribute] = { presence: { allowEmpty: false }, format: \"\\\\d*\\\\.?\\\\d+\" }\n          }\n        }\n      });\n      this.setState({ modelType, validationRule });\n      if (this.props.match.params.id) {\n        apiService.getSingle(route, this.props.match.params.id).then(formObj => {\n          Object.keys(modelType.bluePrint).forEach((attribute, key) => {\n            if (!modelType.bluePrint[attribute].hidden)\n              if (modelType.bluePrint[attribute].dataType === \"DateTime\" || modelType.bluePrint[attribute].dataType === \"Date\") {\n                formObj[attribute] = new Date(formObj[attribute]);\n              }\n              else if (modelType.bluePrint[attribute].dataType === \"RichText\")\n                formObj[attribute] = (!formObj[attribute]) ? \"\" : formObj[attribute];\n              else if (modelType.bluePrint[attribute].dataType === \"Number\")\n                formObj[attribute] += \"\";\n\n            Object.keys(modelType.bluePrint).forEach((at, indx) => {\n              if (modelType.bluePrint[at].dataType && modelType.bluePrint[at].loadVia === attribute) {\n                modelType.bluePrint[at][\"loadViaId\"] = formObj[attribute];\n              }\n            });\n\n          });\n\n          this.setState({ formObj, isLoading: false })\n        }).catch(m => {\n          this.props.history.push(`/${route}`)\n        })\n      } else {\n        let formObj = {\n          _id: \"\"\n        }\n        Object.keys(modelType.bluePrint).forEach((attribute, key) => {\n          if (!modelType.bluePrint[attribute].hidden && (modelType.bluePrint[attribute].dataType === \"Date\" || modelType.bluePrint[attribute].dataType === \"DefaultDate\")) {\n            formObj[attribute] = new Date();\n          } else {\n            formObj[attribute] = modelType.bluePrint[attribute].default;\n          }\n        });\n        this.setState({ formObj, isLoading: false });\n      }\n    })\n\n\n  }\n\n  convertAllParametersToString(ad) {\n    for (var prop in ad) {\n      ad[prop] += \"\";\n    }\n    return ad;\n  }\n  static get RULES() {\n    return {\n      title: {\n        presence: {\n          allowEmpty: false\n        }\n      }\n    };\n  }\n  handleChange({ target }) {\n    const { name, value } = target;\n    const errors = validate({ [name]: value }, { [name]: this.state.validationRule[name] });\n    let obj = this.fillInObject(Object.assign({}, this.state.formObj), name, value);\n    this.setState({\n      formObj: obj,\n      errors: Object.assign(\n        {},\n        this.state.errors,\n        errors ? errors : { [name]: undefined }\n      )\n    });\n  }\n  handleChageCustom = (name, value) => {\n    const errors = validate({ [name]: value }, { [name]: this.state.validationRule[name] });\n    let obj = this.fillInObject(Object.assign({}, this.state.formObj), name, value);\n    this.setState({\n      formObj: obj,\n      errors: Object.assign(\n        {},\n        this.state.errors,\n        errors ? errors : { [name]: undefined }\n      )\n    });\n  }\n  handleChangeBoolean({ target }) {\n    const { name } = target;\n    let obj = this.fillInObject(Object.assign({}, this.state.formObj), name, !this.state.formObj[name]);\n    this.setState({\n      formObj: obj\n    });\n  }\n\n  fillInObject(obj, name, value) {\n    // console.log(value);\n\n    obj[name] = value;\n    return obj;\n  }\n  isContainProps(ad) {\n    let rt = false;\n    for (var prop in ad) {\n      if (ad[prop] && ad.hasOwnProperty(prop)) {\n        rt = true;\n        // handle prop as required\n      }\n    }\n    return rt;\n  }\n  handleSubmit(e) {\n    e.preventDefault();\n    // if (this.state.formObj.image) {\n    const errors = validate(this.state.formObj, this.state.validationRule);\n    debugger;\n    if (errors) {\n      toast.error(\"Form data is Invalid\")\n      return this.setState({ formError: null, errors });\n    }\n\n    this.setState({ isLoading: true }, () => {\n      if (!this.state.formObj._id) {\n        apiService.add(this.state.route, this.state.formObj).then(res => {\n          if (!this.state.single)\n            this.props.history.push(`/${this.state.route}`)\n\n        }).catch(err => {\n          toast.error(err.response.data.message);\n          this.setState({ isLoading: false })\n        })\n      } else {\n        apiService.update(this.state.route, this.state.formObj, this.state.formObj._id).then(res => {\n          if (!this.state.single) {\n            this.props.history.push(`/${this.state.route}`)\n          } else {\n            toast.success(\"Successfully Updated!\");\n            this.setState({ isLoading: false })\n          }\n\n        }).catch(err => {\n          toast.error(err.response.data.message);\n          this.setState({ isLoading: false })\n        })\n      }\n    })\n\n\n\n    // } else {\n    //   toast.error(\"Please Upload Packege Image\")\n    // }\n  }\n  render() {\n    const { formObj, isLoading, errors, modelType, route, single } = this.state;\n\n    return (\n      <div>\n        {\n          isLoading ? <span><i className=\"text-muted icon-wait\"></i> Loading...</span> :\n            formObj ? <div className=\"animated fadeIn\" >\n              <Row>\n                <Col lg={6}>\n                  <form onSubmit={e => this.handleSubmit(e)} >\n                    <ToastContainer></ToastContainer>\n                    {this.state.formError ? (\n                      <Notification type=\"danger\" onCloseBtnClick={e => this.setState({ formError: null })}>\n                        {this.state.formError}\n                      </Notification>\n                    ) : null}\n                    <Card>\n                      <CardHeader>\n                        <div className=\"row\">\n                          <div className={\"col-7\"}>\n                            <strong><i className={`${modelType.icon} pr-1`}></i>{modelType.modelDisplayName} Manage</strong>\n                          </div>\n                          <div className={\"col-5\"}>\n                            {\n                              !single && <Link to={`/${route}`} className=\"btn btn-danger btn-sm mr-1\" style={{ width: 60 }} disabled={isLoading}>Cancel</Link>\n                            }\n\n                            <button className={`btn btn-success btn-sm ${single ? \"btn-block\" : \"\"}`} style={{ width: single ? null : 60 }} disabled={isLoading}>Save</button>\n\n                          </div>\n                        </div>\n\n                      </CardHeader>\n                      <CardBody>\n                        {\n                          Object.keys(modelType.bluePrint).map((attribute, key) => {\n                            if (!modelType.bluePrint[attribute].hidden && modelType.bluePrint[attribute].dataType !== \"DefaultDate\") {\n                              if (modelType.bluePrint[attribute].dataType === \"String\" || modelType.bluePrint[attribute].dataType === \"Number\") {\n                                return <Field label={modelType.bluePrint[attribute].label} errors={errors[attribute]} key={key}>\n                                  <input\n                                    name={attribute}\n                                    // type={modelType.bluePrint[attribute].dataType === \"String\" ? \"text\" : \"number\"}\n                                    type=\"text\"\n                                    placeholder={modelType.bluePrint[attribute].placeholder}\n                                    value={formObj[attribute]}\n                                    disabled={isLoading}\n                                    onChange={e => this.handleChange(e)}\n                                  />\n                                </Field>\n                              }\n                              else if (modelType.bluePrint[attribute].dataType === \"PasswordHash\") {\n                                return <Field label={modelType.bluePrint[attribute].label} errors={errors[attribute]} key={key}>\n                                  <PasswordField\n                                    name={attribute}\n                                    // type={modelType.bluePrint[attribute].dataType === \"String\" ? \"text\" : \"number\"}\n                                    placeholder={modelType.bluePrint[attribute].placeholder}\n                                    value={formObj[attribute]}\n                                    disabled={isLoading}\n                                    onChange={value => this.handleChageCustom(attribute, value)}\n\n                                  />\n                                </Field>\n                              } else if (modelType.bluePrint[attribute].dataType === \"RichText\") {\n                                return <div className=\"form-group\">\n                                  <label>{modelType.bluePrint[attribute].label}</label>\n                                  <RTEField\n                                    value={formObj[attribute]}\n                                    onChange={value => this.handleChageCustom(attribute, value)}\n                                  />\n                                </div>\n                              } else if (modelType.bluePrint[attribute].dataType === \"AddressBar\") {\n                                return <Field label={modelType.bluePrint[attribute].label} errors={errors[attribute]} key={key}>\n                                  <AddressLocationField\n                                    name={attribute}\n                                    type={modelType.bluePrint[attribute].dataType === \"String\" ? \"text\" : \"number\"}\n                                    placeholder={modelType.bluePrint[attribute].placeholder}\n                                    value={formObj[attribute]}\n                                    location={formObj[attribute + \"Location\"]}\n                                    disabled={isLoading}\n                                    googleMapURL={googleMapURL}\n                                    onChange={(res) => {\n                                      this.handleChageCustom(attribute, res[attribute])\n                                      if (res[attribute + \"Location\"])\n                                        this.handleChageCustom(attribute + \"Location\", res[attribute + \"Location\"])\n                                    }}\n\n                                  />\n                                </Field>\n                              } else if (modelType.bluePrint[attribute].dataType === \"EnumDropDown\") {\n                                return <Field label={modelType.bluePrint[attribute].label} errors={errors[attribute]} key={key}>\n                                  <select\n                                    name={attribute}\n                                    value={formObj[attribute]}\n                                    disabled={isLoading}\n                                    onChange={e => this.handleChange(e)}\n                                  >\n                                    <option value={null}>{modelType.bluePrint[attribute].placeholder}</option>\n                                    {modelType.bluePrint[attribute].enum.map(en => <option value={en}>{en}</option>)}\n                                  </select>\n                                </Field>\n                              } else if (modelType.bluePrint[attribute].dataType === \"ParentDropDown\") {\n                                return <ParentDropDown\n                                  key={key}\n                                  name={attribute}\n                                  bluePrint={modelType.bluePrint[attribute]}\n                                  value={formObj[attribute]}\n                                  errors={errors[attribute]}\n                                  disabled={isLoading}\n                                  onChange={parentId => {\n                                    Object.keys(modelType.bluePrint).forEach((at, indx) => {\n                                      if (modelType.bluePrint[at].dataType && modelType.bluePrint[at].loadVia === attribute) {\n                                        modelType.bluePrint[at][\"loadViaId\"] = parentId;\n                                      }\n                                    });\n                                    this.setState({ modelType });\n                                    this.handleChageCustom(attribute, parentId);\n                                  }}\n                                />\n\n                              } else if (modelType.bluePrint[attribute].dataType === \"ParentCheckList\") {\n                                return <ParentCheckList\n                                  key={key}\n                                  name={attribute}\n                                  bluePrint={modelType.bluePrint[attribute]}\n                                  value={formObj[attribute]}\n                                  errors={errors[attribute]}\n                                  disabled={isLoading}\n                                  onChange={parentId => this.handleChageCustom(attribute, parentId)}\n                                />\n                              } else if (modelType.bluePrint[attribute].dataType === \"MultipleImages\") {\n                                return <MultipleImageUploader\n                                  key={key}\n                                  name={attribute}\n                                  bluePrint={modelType.bluePrint[attribute]}\n                                  value={formObj[attribute]}\n                                  errors={errors[attribute]}\n                                  disabled={isLoading}\n                                  onChange={parentId => this.handleChageCustom(attribute, parentId)}\n                                />\n                              } else if (modelType.bluePrint[attribute].dataType === \"Image\") {\n                                return <div className=\"col-sm-6\">\n                                  <ImageUploader\n                                    key={key}\n                                    name={attribute}\n                                    label={modelType.bluePrint[attribute].label}\n                                    placeholder={modelType.bluePrint[attribute].placeholder}\n                                    value={formObj[attribute]}\n                                    errors={errors[attribute]}\n                                    onChange={filePath => this.handleChageCustom(attribute, filePath)} />\n                                </div>\n                              } else if (modelType.bluePrint[attribute].dataType === \"Boolean\") {\n                                return <div className=\"form-group\" key={key}>\n                                  <label>{modelType.bluePrint[attribute].label}: </label>\n                                  <input\n                                    name={attribute}\n                                    type={\"checkbox\"}\n                                    className=\"ml-3 mt-1\"\n                                    placeholder={modelType.bluePrint[attribute].placeholder}\n                                    checked={formObj[attribute]}\n                                    disabled={isLoading}\n                                    onChange={e => this.handleChangeBoolean(e)}\n                                  />\n                                </div>\n                              } else if (modelType.bluePrint[attribute].dataType === \"Date\") {\n                                return <Field label={modelType.bluePrint[attribute].label} labelBr={true} errors={errors[attribute]} key={key}>\n                                  <DatePicker\n                                    selected={formObj[attribute]}\n                                    onChange={date => this.handleChageCustom(attribute, date)}\n                                  />\n                                </Field>\n                              } else if (modelType.bluePrint[attribute].dataType === \"DateTime\") {\n                                // return <Field label={modelType.bluePrint[attribute].label} labelBr={true} errors={errors[attribute]}>\n                                return <div className=\"form-group\">\n                                  <label>{modelType.bluePrint[attribute].label}</label>\n                                  <br />\n                                  <DateTimePicker\n                                    value={formObj[attribute]}\n                                    onChange={date => this.handleChageCustom(attribute, date)}\n                                    key={key}\n                                  />\n                                </div>\n                                // </Field>\n                              } else\n                                return null;\n                            } else\n                              return null;\n                          })\n                        }\n                      </CardBody>\n                    </Card>\n                  </form>\n                </Col>\n\n\n              </Row>\n            </div>\n              : <span><i className=\"text-muted icon-ban\"></i> Not found</span>\n        }\n      </div>\n    )\n\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { categories } = state;\n  // const { token, admin } = authentication;\n  return {\n    categories\n  };\n}\n\nconst connectedDataTable = connect(mapStateToProps)(withRouter(DataTable));\nconst connectedDetail = connect(mapStateToProps)(withRouter(Detail));\nconst connectedManage = connect(mapStateToProps)(withRouter(Manage));\nexport { connectedDataTable as DataTable, connectedDetail as Detail, connectedManage as Manage };\n\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_helpers\\imageHelper.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\RTEField.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ParentCheckList.js",["364","365","366","367","368"],"import React, { Component } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport config from \"../_config\";\nimport { authHeader } from \"../_helpers\";\nimport Axios from \"axios\";\nexport default class ParentCheckList extends Component {\n\n    state = {\n        dataset: null,\n        bluePrint: null,\n        fetching: true\n    }\n    loadViaId = null;\n    componentDidMount() {\n        let { value, bluePrint } = this.props;\n        let { entityAPI } = bluePrint;\n        this.setState({ bluePrint: bluePrint })\n        const requestOptions = {\n            method: 'GET',\n            headers: authHeader()\n        };\n        fetch(`${config.baseUrl}/api/admin/${entityAPI}`, requestOptions).then(result => result.json()).then(dataset => {\n            let newArray = [];\n            dataset.forEach(element => {\n                let isSelect = false;\n                if (value && value.length > 0) {\n                    let found = value.find(m => m.obj._id === element._id)\n                    if (found) {\n                        isSelect = found.isSelect;\n                    }\n                }\n                newArray.push({\n                    isSelect,\n                    obj: element\n                })\n            });\n            this.setState({ dataset: newArray, fetching: false })\n        }).catch(err => {\n            toast.error(`Unable to fetch ${entityAPI}`)\n            this.setState({ dataset: -1, fetching: false })\n        });\n\n    }\n\n    handleChange(index) {\n        debugger;\n        let dataset = JSON.parse(JSON.stringify(this.state.dataset));\n        dataset[index].isSelect = !dataset[index].isSelect;\n        this.setState({ dataset });\n        // const { value } = target;\n        this.props.onChange(dataset.filter(m => m.isSelect));\n    }\n\n    render() {\n        let { label, errors, disabled, placeholder, displayfield, entityAPI } = this.props.bluePrint;\n        let { value, name } = this.props;\n\n        let { dataset, fetching } = this.state;\n        return (\n            <div className=\"form-group\">\n                <ToastContainer />\n                <label>{label}</label>\n                <br />\n                {fetching && <div className=\"text-primary\">Fething {entityAPI}..</div>}\n\n                {!fetching && dataset && dataset.length > 0 && dataset.map((d, i) => <div className=\"row\" style={{ cursor: \"pointer\" }} onClick={() => this.handleChange(i)}>\n                    <input type=\"checkbox\"\n                        className=\"form-control ml-3 mt-1\"\n                        style={{ height: 15, width: 15, bottom: 0, cursor: \"pointer\" }}\n                        checked={d.isSelect}\n                    />\n                    <span style={{ color: \"#5C6873\" }} className=\"ml-1\">{\" - \"}{d.obj[displayfield]}</span>\n                </div>)\n                }\n                {!fetching && ((dataset && dataset.length === 0) || !dataset) && <div className=\"text-info\">No {entityAPI} found..</div>}\n                {errors ? <div className=\"alert alert-danger\">{errors[0]}</div> : null}\n            </div >\n        );\n    }\n}","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ParentDropDown.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\ImageUploader.js",["369","370"],"import React, { Component } from \"react\";\nimport ImageHelper from \"../_helpers/imageHelper\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport config from \"../_config\";\nexport default class ImageUploader extends Component {\n    onChangeHandler = event => {\n        var files = event.target.files;\n        if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n            try {\n                let formdata = new FormData();\n                formdata.append('image', files[0]);\n\n                var requestOptions = {\n                    method: 'POST',\n                    body: formdata,\n                    redirect: 'follow'\n                };\n\n                fetch(config.baseUrl + \"/api/upload/image\", requestOptions)\n                    .then(response => response.json())\n                    .then(result => {\n                        this.props.onChange(result.filePath);\n                    })\n                    .catch(error => console.log('error', error));\n                // let reader = new FileReader();\n                // reader.readAsDataURL(files[0]);\n                // reader.onload = (e) => {\n                //     // base 64\n                //     let file = e.target.result;\n\n                //     let obj = this.fillInObject(Object.assign({}, this.state.packageObj), \"image\", file);\n                //     obj.selectedImage = files[0];\n\n                //     this.setState({\n                //         packageObj: obj\n                //     });\n                // }\n            } catch (error) {\n                toast.error('Invalid Image')\n            }\n        }\n    }\n    checkMimeType = (event) => {\n        //getting file object\n        let files = event.target.files\n        //define message container\n        let err = []\n        // list allow mime type\n        const types = ['image/png', 'image/jpeg', 'image/gif']\n        // loop access array\n        for (var x = 0; x < files.length; x++) {\n            // compare file type find doesn't matach\n            if (types.every(type => files[x].type !== type)) {\n                // create error message and assign to container   \n                err[x] = files[x].type + ' is not a supported format\\n';\n            }\n        };\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n            // discard selected file\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return (err.length > 0) ? false : true;\n    }\n    maxSelectFile = (event) => {\n        let files = event.target.files\n        if (files.length > 1) {\n            const msg = 'Only 1 images can be uploaded at a time'\n            event.target.value = null\n            toast.warn(msg)\n            return false;\n        }\n        return true;\n    }\n    checkFileSize = (event) => {\n        let files = event.target.files\n        let size = 2000000\n        let err = [];\n        for (var x = 0; x < files.length; x++) {\n            if (files[x].size > size) {\n                err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n            }\n        };\n        for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n            // discard selected file\n            toast.error(err[z])\n            event.target.value = null\n        }\n        return true;\n    }\n\n    render() {\n        let { label, value, name, errors, style } = this.props;\n        return (\n            <div className=\"form-group\">\n                <ToastContainer />\n                <label>{label}</label>\n                <br />\n                <div className=\"col-sm-12\">\n                    <img src={ImageHelper.getImageURL(value)} alt={label}\n                        // style={style ? style : { height: 'auto', width: '100%' }} \n                        style={{ height: 'auto', width: '100%' }}\n                    />\n                </div>\n                <div className=\"col-sm-12\">\n                    <button type=\"button\" className=\"btn btn-info text-white\" style={{ width: '100%' }} onClick={() => document.getElementById(`image${name}`).click()}>Select Image</button>\n                    <input type=\"file\" className=\"form-control mt-1\" name={name} id={`image${name}`} onChange={this.onChangeHandler} style={{ display: 'none' }} />\n\n                </div>\n\n                {errors ? <div className=\"alert alert-danger\">{errors[0]}</div> : null}\n            </div>\n        );\n    }\n}","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\AddressLocationField\\GoogleMapComponent.js",[],"C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\AddressLocationField\\index.js",["371","372","373"],"import React, { Component } from 'react';\nimport Axios from 'axios';\nimport config from '../../_config';\nimport { GoogleMap, Marker, withScriptjs, withGoogleMap } from \"react-google-maps\"\nimport GoogleMapComponent from './GoogleMapComponent';\n\nexport default class AddressLocationField extends Component {\n    state = {\n        value: \"\"\n    }\n    componentDidMount() {\n        this.setState({ value: this.props.value })\n        if (this.props.value && !this.props.location)\n            this.handleInputBlur({ target: { name: this.props.name, value: this.props.value } });\n    }\n    handleInputChange = ({ target }) => {\n        const { name, value } = target;\n        let obj = this.props.location ? { [name]: value, [name + \"Location\"]: this.props.location } : { [name]: value }\n        this.triggerOnChange(obj)\n    }\n    handleInputBlur = ({ target }) => {\n        if (!this.props.disabled) {\n            const { name, value } = target;\n            this.geoCoding(name, value).then(res => {\n                this.triggerOnChange(res)\n            }).catch(err => {\n                console.log(err);\n            })\n        }\n\n    }\n\n    handleMapClick = (name, latLng) => {\n        if (!this.props.disabled)\n            this.geoCoding(name, null, latLng).then(res => {\n                this.triggerOnChange(res)\n            }).catch(err => {\n                console.log(err);\n            })\n\n    }\n\n    geoCoding = (name, address, latLng = null) => {\n        let params = latLng ? { key: config.googleMapAPIKey, latlng: latLng.lat() + \",\" + latLng.lng() } : { key: config.googleMapAPIKey, address }\n        return Axios.get(\"https://maps.googleapis.com/maps/api/geocode/json\", { params }).then(response => {\n            let result = response.data.results[0];\n            if (result) {\n                return {\n                    [name]: result.formatted_address,\n                    [name + \"Location\"]: { type: \"Point\", coordinates: [result.geometry.location.lat, result.geometry.location.lng] }\n                }\n            } else {\n                throw Object.assign({\n                    message: \"No Result Found\"\n                })\n            }\n        })\n    }\n    triggerOnChange = (obj) => {\n        this.setState({ value: obj[Object.keys(obj)[0]] })\n        if (this.props.onChange) {\n            this.props.onChange(obj);\n        }\n    }\n\n    render() {\n        let { value, name, placeholder, disabled, location, googleMapURL } = this.props;\n        return (\n            <div>\n                <input\n                    name={name}\n                    type=\"text\"\n                    className=\"form-control\"\n                    placeholder={placeholder}\n                    value={this.state.value}\n                    disabled={disabled}\n                    onChange={this.handleInputChange}\n                    onBlur={e => this.handleInputBlur(e)}\n                />\n                {\n                    location && <GoogleMapComponent\n                        googleMapURL={googleMapURL}\n                        loadingElement={<div style={{ height: `100%` }} />}\n                        containerElement={<div style={{ height: `300px` }} />}\n                        mapElement={<div style={{ height: `100%` }} />}>\n                        <GoogleMap\n                            defaultZoom={config.mapZoom}\n                            // defaultCenter={{ lat: location.coordinates[0], lng: location.coordinates[1] }}\n                            center={{ lat: location.coordinates[0], lng: location.coordinates[1] }}\n                            onClick={d => this.handleMapClick(name, d.latLng)}\n                        >\n                            <Marker position={{ lat: location.coordinates[0], lng: location.coordinates[1] }} />\n                        </GoogleMap>\n                    </GoogleMapComponent>\n                }\n            </div>\n        );\n    }\n}","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\PasswordField\\index.js",["374","375","376","377"],"import React, { Component } from 'react';\nimport Axios from 'axios';\nimport config from '../../_config';\n\nexport default class PasswordField extends Component {\n    state = {\n        value: \"\"\n    }\n    componentDidMount() {\n        this.setState({ value: this.props.value })\n        if (this.props.value)\n            this.handleInputChange({ target: { name: this.props.name, value: this.props.value } });\n    }\n    handleInputChange = ({ target }) => {\n        if (!this.props.disabled) {\n            const { name, value } = target;\n            this.triggerOnChange(value)\n        }\n    }\n    triggerOnChange = (value) => {\n        this.setState({ value: value })\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    }\n    render() {\n        let { value, name, placeholder, disabled } = this.props;\n        return (\n            <div>\n                <input\n                    name={name}\n                    type=\"password\"\n                    className=\"form-control\"\n                    placeholder={placeholder}\n                    // value={this.state.value}\n                    disabled={disabled}\n                    onChange={this.handleInputChange}\n                />\n\n            </div>\n        );\n    }\n}","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_ui_components\\MultipleImageUploader\\index.js",["378","379","380","381","382","383","384","385","386","387","388"],"import React, { Component } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport config from \"../../_config\";\nimport { authHeader } from \"../../_helpers\";\nimport Axios from \"axios\";\nimport ImageUploader from \"../ImageUploader\";\nimport './style.css';\n\nexport default class MultipleImageUploader extends Component {\n\n    state = {\n        dataset: null,\n        bluePrint: null,\n        fetching: true\n    }\n    loadViaId = null;\n    componentDidMount() {\n        let { value, bluePrint } = this.props;\n        let dataset = [];\n        if (!value || (value && value.length === 0)) {\n            dataset.push({ isPrimary: true, path: \"\" });\n        } else {\n            dataset = value;\n        }\n\n        this.setState({ bluePrint: bluePrint, dataset })\n\n    }\n\n    handleChange(index, path) {\n        let dataset = JSON.parse(JSON.stringify(this.state.dataset));\n        dataset[index].path = path;\n        this.setState({ dataset });\n        this.props.onChange(dataset.filter(m => m.path !== \"\"));\n    }\n\n    addImageCard = () => {\n        let dataset = this.state.dataset;\n        dataset.push({ isPrimary: false, path: \"\" });\n        this.setState({ dataset })\n    }\n    defaultImageCard = (index) => {\n        let dataset = this.state.dataset;\n        dataset.forEach((d, i) => {\n            if (index === i) {\n                d.isPrimary = true;\n            } else {\n                d.isPrimary = false;\n            }\n        })\n        this.setState({ dataset });\n        this.props.onChange(dataset.filter(m => m.path !== \"\"));\n    }\n    deleteImageCard = (index) => {\n        if (index > 0) {\n            let dataset = this.state.dataset;\n            if (dataset[index].isPrimary)\n                this.defaultImageCard(0);\n            dataset.splice(index, 1);\n            this.setState({ dataset })\n            this.props.onChange(dataset.filter(m => m.path !== \"\"));\n        }\n    }\n    imageCard = (item, index) => {\n        return (\n            <ImageUploader\n                style={{ height: 120, width: 'auto', maxWidth: 120 }}\n                name={index}\n                value={item.path}\n                onChange={filePath => this.handleChange(index, filePath)}\n            />\n        )\n    }\n    render() {\n        let { label, errors, disabled, placeholder, displayfield, entityAPI } = this.props.bluePrint;\n        let { value, name } = this.props;\n\n        let { dataset, fetching } = this.state;\n\n        return (\n            <div className=\"form-group\">\n                <ToastContainer />\n                <label>{label}</label>\n                <br />\n                <div className=\"row\">\n                    {dataset && dataset.map((d, i) => <div class=\"col-sm-4 noPadding\" >\n                        <div className=\"select-outer\">\n                            <div className=\"row\" style={{ height: 15 }}>\n                                <div className=\"col-8 pt-1\" onClick={() => this.defaultImageCard(i)}>\n                                    <i className={`primary-icon primary-color fa ${d.isPrimary ? \"fa-check-square\" : \"fa-square-o\"} ml-1`}></i>\n                                    <span className=\"ml-1 mt-1 primary-icon primary-color\">Primary</span>\n                                </div>\n                                <div className=\"col-4\" onClick={() => this.deleteImageCard(i)}>\n                                    <i className=\"text-danger fa fa-remove float-right primary-icon m-2\"></i>\n                                </div>\n                            </div>\n                            {this.imageCard(d, i)}\n\n                        </div>\n                    </div>)}\n                    <div class=\"col-sm-4 noPadding\"  onClick={() => this.addImageCard()}>\n                        <div className=\" select-outer\">\n                            <div className=\"circle center\">\n                                <i className=\"fa fa-plus add-icon center2\"></i>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4\"></div>\n                </div>\n\n                {errors ? <div className=\"alert alert-danger\">{errors[0]}</div> : null}\n            </div >\n        );\n    }\n}\n","C:\\Users\\Amir Chudhary\\Desktop\\fms\\fms-frontend\\src\\_pages\\Authenticated\\Drivers\\Drivers.js",["389","390","391","392","393","394","395","396","397","398","399","400"],"import React, { useState } from 'react'\nimport {Card, CardBody, CardHeader, Col, Row, Table, FormGroup, Input,Badge} from \"reactstrap\"\nimport { Link } from 'react-router-dom';\nimport Field from '../../../_common/field';\nimport PaginationComponent from \"react-reactstrap-pagination\";\n\nfunction UserCustomNotificationRow(props) {\n  console.log(props)\n  const DriverObj = props.DriverObj;\n  const driverDetailLink = `/drivers/detail/${DriverObj._id}`;\n  const userCustomNotificationEditLink = `/user-custom-notification/edit/${DriverObj._id}`;\n  const userCustomNotificationDeleteLink = `/user-custom-notifications/delete/${DriverObj._id}`;\n\n  const getBadge = status => {\n    return status === 'Active' ? 'success' :\n        status === 'Inactive' ? 'secondary' :\n            status === 'Pending' ? 'warning' :\n                status === 'Banned' ? 'danger' :\n                    'primary'\n\n    return status ? \"success\" : \"danger\";\n    \n  };\n\n  return (\n    <tr>\n      {/* <th scope=\"row\"><Link to={userCustomNotificationLink}>{DriverObj.id}</Link></th> */}\n      <td><Link to={driverDetailLink}>{DriverObj.name}</Link></td>\n      <td>{DriverObj.email}</td>\n      <td>{DriverObj.phone}  </td>\n      <td>{ <Badge color={getBadge(DriverObj.status)} > {DriverObj.status}</Badge>}</td>\n      <td>\n        {/* <Link to={userCustomNotificationEditLink}>\n          <i className=\"fa fa-edit\"></i>\n        </Link> */}\n        <Link to={userCustomNotificationDeleteLink} className=\"ml-2 text-danger\">\n          {/* <i className=\"fa fa-trash\"></i> */}\n          <i className=\"icon-trash\"></i>\n        </Link>\n      </td>\n    </tr>\n  );\n}\n\nexport const Drivers = () => {\n  const [loading,setLoading] = useState(false)\n  const [driver,setDriver] = useState([\n    {_id:1, name:\"Amir\",email:\"test@gmail.com\",status:\"Active\"}\n  ])\n  const [status,setStatus] = useState(\"active\")\n  const [verified,setVarified] = useState(\"var\")\n  const [activePagination,setActivePagination] = useState({\n    selectedPage:1,\n    pageSize:10\n  })\n\n  \n\n  return (\n    <div className=\"animated fadeIn\">\n        <Row>\n          <Col xl={12}>\n            <Card>\n              <CardHeader>\n                <i className=\"fa fa-users\"></i> Drivers\n                <Link\n                  to={`/user-custom-notification/add`}\n                  className=\"btn btn-primary btn-sm\"\n                  style={{ float: \"right\" }}\n                >\n                  Add New\n                </Link>\n              </CardHeader>\n              <CardBody>\n                <Field>\n                  <input\n                    name=\"search\"\n                    type=\"text\"\n                    placeholder=\"Search...\"\n                   \n                    \n                  />\n                </Field>\n                <Table responsive hover>\n                  <thead>\n                    <tr>\n                      {/* <th scope=\"col\">id</th> */}\n                      <th scope=\"col\">Name</th>\n                      <th scope=\"col\">Email</th>\n                      <th scope=\"col\">Mobile no</th>\n                      <th scope=\"col\">Status</th>\n                      {/* <th scope=\"col\">Status</th> */}\n                      <th scope=\"col\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {driver\n                      .slice(\n                        (activePagination.selectedPage - 1) *\n                        activePagination.pageSize,\n                        activePagination.selectedPage *\n                        activePagination.pageSize\n                      )\n                      .map((item, index) => (\n                        <UserCustomNotificationRow  DriverObj={item} key={index}  />\n                      ))}\n                  </tbody>\n                </Table>\n                <PaginationComponent\n                  totalItems={driver.length}\n                  pageSize={activePagination.pageSize}\n                 \n                  maxPaginationNumbers={\n                    activePagination.maxPaginationNumbers\n                  }\n                  activePage={activePagination.selectedPage}\n                />\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n  )\n}\n",{"ruleId":"401","replacedBy":"402"},{"ruleId":"403","replacedBy":"404"},{"ruleId":"405","severity":1,"message":"406","line":1,"column":17,"nodeType":"407","messageId":"408","endLine":1,"endColumn":26},{"ruleId":"405","severity":1,"message":"409","line":2,"column":22,"nodeType":"407","messageId":"408","endLine":2,"endColumn":27},{"ruleId":"405","severity":1,"message":"410","line":2,"column":37,"nodeType":"407","messageId":"408","endLine":2,"endColumn":43},{"ruleId":"405","severity":1,"message":"411","line":36,"column":11,"nodeType":"407","messageId":"408","endLine":36,"endColumn":12},{"ruleId":"405","severity":1,"message":"412","line":2,"column":17,"nodeType":"407","messageId":"408","endLine":2,"endColumn":25},{"ruleId":"405","severity":1,"message":"406","line":1,"column":17,"nodeType":"407","messageId":"408","endLine":1,"endColumn":26},{"ruleId":"405","severity":1,"message":"413","line":15,"column":10,"nodeType":"407","messageId":"408","endLine":15,"endColumn":22},{"ruleId":"405","severity":1,"message":"414","line":18,"column":10,"nodeType":"407","messageId":"408","endLine":18,"endColumn":20},{"ruleId":"415","severity":1,"message":"416","line":39,"column":26,"nodeType":"417","endLine":39,"endColumn":46},{"ruleId":"405","severity":1,"message":"418","line":2,"column":10,"nodeType":"407","messageId":"408","endLine":2,"endColumn":13},{"ruleId":"405","severity":1,"message":"419","line":2,"column":15,"nodeType":"407","messageId":"408","endLine":2,"endColumn":22},{"ruleId":"405","severity":1,"message":"420","line":2,"column":24,"nodeType":"407","messageId":"408","endLine":2,"endColumn":31},{"ruleId":"405","severity":1,"message":"421","line":2,"column":33,"nodeType":"407","messageId":"408","endLine":2,"endColumn":41},{"ruleId":"405","severity":1,"message":"422","line":2,"column":43,"nodeType":"407","messageId":"408","endLine":2,"endColumn":53},{"ruleId":"405","severity":1,"message":"423","line":2,"column":55,"nodeType":"407","messageId":"408","endLine":2,"endColumn":62},{"ruleId":"405","severity":1,"message":"424","line":2,"column":64,"nodeType":"407","messageId":"408","endLine":2,"endColumn":73},{"ruleId":"405","severity":1,"message":"425","line":2,"column":75,"nodeType":"407","messageId":"408","endLine":2,"endColumn":88},{"ruleId":"405","severity":1,"message":"426","line":9,"column":10,"nodeType":"407","messageId":"408","endLine":9,"endColumn":19},{"ruleId":"427","severity":1,"message":"428","line":14,"column":1,"nodeType":"429","messageId":"430","endLine":16,"endColumn":2},{"ruleId":"431","severity":1,"message":"432","line":24,"column":40,"nodeType":"433","messageId":"430","endLine":24,"endColumn":42},{"ruleId":"431","severity":1,"message":"432","line":77,"column":59,"nodeType":"433","messageId":"430","endLine":77,"endColumn":61},{"ruleId":"431","severity":1,"message":"434","line":78,"column":22,"nodeType":"433","messageId":"430","endLine":78,"endColumn":24},{"ruleId":"431","severity":1,"message":"432","line":85,"column":59,"nodeType":"433","messageId":"430","endLine":85,"endColumn":61},{"ruleId":"431","severity":1,"message":"434","line":86,"column":22,"nodeType":"433","messageId":"430","endLine":86,"endColumn":24},{"ruleId":"435","severity":1,"message":"436","line":18,"column":15,"nodeType":"417","endLine":18,"endColumn":27},{"ruleId":"435","severity":1,"message":"436","line":19,"column":46,"nodeType":"417","endLine":19,"endColumn":58},{"ruleId":"405","severity":1,"message":"437","line":3,"column":10,"nodeType":"407","messageId":"408","endLine":3,"endColumn":15},{"ruleId":"438","severity":1,"message":"439","line":36,"column":40,"nodeType":"440","messageId":"441","endLine":36,"endColumn":50},{"ruleId":"405","severity":1,"message":"442","line":59,"column":13,"nodeType":"407","messageId":"408","endLine":59,"endColumn":18},{"ruleId":"405","severity":1,"message":"443","line":59,"column":27,"nodeType":"407","messageId":"408","endLine":59,"endColumn":38},{"ruleId":"431","severity":1,"message":"434","line":123,"column":68,"nodeType":"433","messageId":"430","endLine":123,"endColumn":70},{"ruleId":"405","severity":1,"message":"444","line":12,"column":10,"nodeType":"407","messageId":"408","endLine":12,"endColumn":17},{"ruleId":"445","severity":1,"message":"446","line":1,"column":1,"nodeType":"447","endLine":169,"endColumn":3},{"ruleId":"445","severity":1,"message":"448","line":3,"column":1,"nodeType":"447","endLine":6,"endColumn":2},{"ruleId":"405","severity":1,"message":"414","line":4,"column":10,"nodeType":"407","messageId":"408","endLine":4,"endColumn":20},{"ruleId":"431","severity":1,"message":"432","line":24,"column":45,"nodeType":"433","messageId":"430","endLine":24,"endColumn":47},{"ruleId":"431","severity":1,"message":"434","line":43,"column":43,"nodeType":"433","messageId":"430","endLine":43,"endColumn":45},{"ruleId":"449","severity":1,"message":"450","line":123,"column":23,"nodeType":"451","messageId":"452","endLine":123,"endColumn":53},{"ruleId":"405","severity":1,"message":"437","line":2,"column":10,"nodeType":"407","messageId":"408","endLine":2,"endColumn":15},{"ruleId":"405","severity":1,"message":"453","line":35,"column":11,"nodeType":"407","messageId":"408","endLine":35,"endColumn":19},{"ruleId":"431","severity":1,"message":"434","line":64,"column":63,"nodeType":"433","messageId":"430","endLine":64,"endColumn":65},{"ruleId":"405","severity":1,"message":"454","line":9,"column":7,"nodeType":"407","messageId":"408","endLine":9,"endColumn":15},{"ruleId":"455","severity":1,"message":"456","line":17,"column":13,"nodeType":"457","messageId":"458","endLine":17,"endColumn":24},{"ruleId":"405","severity":1,"message":"459","line":234,"column":7,"nodeType":"407","messageId":"408","endLine":234,"endColumn":24},{"ruleId":"405","severity":1,"message":"460","line":252,"column":7,"nodeType":"407","messageId":"408","endLine":252,"endColumn":22},{"ruleId":"405","severity":1,"message":"461","line":453,"column":10,"nodeType":"407","messageId":"408","endLine":453,"endColumn":22},{"ruleId":"405","severity":1,"message":"462","line":453,"column":24,"nodeType":"407","messageId":"408","endLine":453,"endColumn":39},{"ruleId":"405","severity":1,"message":"463","line":454,"column":34,"nodeType":"407","messageId":"408","endLine":454,"endColumn":59},{"ruleId":"405","severity":1,"message":"464","line":455,"column":30,"nodeType":"407","messageId":"408","endLine":455,"endColumn":51},{"ruleId":"405","severity":1,"message":"465","line":456,"column":29,"nodeType":"407","messageId":"408","endLine":456,"endColumn":49},{"ruleId":"405","severity":1,"message":"466","line":457,"column":10,"nodeType":"407","messageId":"408","endLine":457,"endColumn":23},{"ruleId":"405","severity":1,"message":"467","line":457,"column":25,"nodeType":"407","messageId":"408","endLine":457,"endColumn":41},{"ruleId":"405","severity":1,"message":"468","line":458,"column":29,"nodeType":"407","messageId":"408","endLine":458,"endColumn":49},{"ruleId":"405","severity":1,"message":"469","line":459,"column":33,"nodeType":"407","messageId":"408","endLine":459,"endColumn":57},{"ruleId":"405","severity":1,"message":"470","line":460,"column":28,"nodeType":"407","messageId":"408","endLine":460,"endColumn":47},{"ruleId":"405","severity":1,"message":"471","line":461,"column":23,"nodeType":"407","messageId":"408","endLine":461,"endColumn":37},{"ruleId":"405","severity":1,"message":"472","line":462,"column":25,"nodeType":"407","messageId":"408","endLine":462,"endColumn":41},{"ruleId":"405","severity":1,"message":"473","line":463,"column":32,"nodeType":"407","messageId":"408","endLine":463,"endColumn":54},{"ruleId":"405","severity":1,"message":"474","line":464,"column":32,"nodeType":"407","messageId":"408","endLine":464,"endColumn":54},{"ruleId":"405","severity":1,"message":"475","line":465,"column":23,"nodeType":"407","messageId":"408","endLine":465,"endColumn":36},{"ruleId":"405","severity":1,"message":"476","line":466,"column":27,"nodeType":"407","messageId":"408","endLine":466,"endColumn":44},{"ruleId":"405","severity":1,"message":"477","line":467,"column":21,"nodeType":"407","messageId":"408","endLine":467,"endColumn":32},{"ruleId":"405","severity":1,"message":"478","line":468,"column":24,"nodeType":"407","messageId":"408","endLine":468,"endColumn":38},{"ruleId":"405","severity":1,"message":"479","line":469,"column":26,"nodeType":"407","messageId":"408","endLine":469,"endColumn":42},{"ruleId":"405","severity":1,"message":"480","line":470,"column":37,"nodeType":"407","messageId":"408","endLine":470,"endColumn":64},{"ruleId":"405","severity":1,"message":"481","line":471,"column":34,"nodeType":"407","messageId":"408","endLine":471,"endColumn":58},{"ruleId":"405","severity":1,"message":"482","line":472,"column":30,"nodeType":"407","messageId":"408","endLine":472,"endColumn":50},{"ruleId":"405","severity":1,"message":"483","line":473,"column":27,"nodeType":"407","messageId":"408","endLine":473,"endColumn":44},{"ruleId":"405","severity":1,"message":"484","line":474,"column":29,"nodeType":"407","messageId":"408","endLine":474,"endColumn":48},{"ruleId":"405","severity":1,"message":"485","line":4,"column":10,"nodeType":"407","messageId":"408","endLine":4,"endColumn":15},{"ruleId":"405","severity":1,"message":"486","line":2,"column":10,"nodeType":"407","messageId":"408","endLine":2,"endColumn":24},{"ruleId":"401","replacedBy":"487"},{"ruleId":"403","replacedBy":"488"},{"ruleId":"405","severity":1,"message":"437","line":3,"column":55,"nodeType":"407","messageId":"408","endLine":3,"endColumn":60},{"ruleId":"405","severity":1,"message":"489","line":11,"column":9,"nodeType":"407","messageId":"408","endLine":11,"endColumn":39},{"ruleId":"405","severity":1,"message":"453","line":14,"column":9,"nodeType":"407","messageId":"408","endLine":14,"endColumn":17},{"ruleId":"431","severity":1,"message":"434","line":29,"column":80,"nodeType":"433","messageId":"430","endLine":29,"endColumn":82},{"ruleId":"405","severity":1,"message":"490","line":67,"column":15,"nodeType":"407","messageId":"408","endLine":67,"endColumn":19},{"ruleId":"405","severity":1,"message":"491","line":90,"column":13,"nodeType":"407","messageId":"408","endLine":90,"endColumn":39},{"ruleId":"405","severity":1,"message":"492","line":2,"column":48,"nodeType":"407","messageId":"408","endLine":2,"endColumn":53},{"ruleId":"405","severity":1,"message":"493","line":2,"column":55,"nodeType":"407","messageId":"408","endLine":2,"endColumn":64},{"ruleId":"405","severity":1,"message":"494","line":2,"column":66,"nodeType":"407","messageId":"408","endLine":2,"endColumn":71},{"ruleId":"449","severity":1,"message":"450","line":88,"column":29,"nodeType":"451","messageId":"452","endLine":88,"endColumn":59},{"ruleId":"431","severity":1,"message":"432","line":209,"column":54,"nodeType":"433","messageId":"430","endLine":209,"endColumn":56},{"ruleId":"405","severity":1,"message":"495","line":6,"column":8,"nodeType":"407","messageId":"408","endLine":6,"endColumn":13},{"ruleId":"405","severity":1,"message":"496","line":56,"column":30,"nodeType":"407","messageId":"408","endLine":56,"endColumn":38},{"ruleId":"405","severity":1,"message":"497","line":56,"column":40,"nodeType":"407","messageId":"408","endLine":56,"endColumn":51},{"ruleId":"405","severity":1,"message":"498","line":57,"column":15,"nodeType":"407","messageId":"408","endLine":57,"endColumn":20},{"ruleId":"405","severity":1,"message":"490","line":57,"column":22,"nodeType":"407","messageId":"408","endLine":57,"endColumn":26},{"ruleId":"449","severity":1,"message":"450","line":54,"column":29,"nodeType":"451","messageId":"452","endLine":54,"endColumn":59},{"ruleId":"405","severity":1,"message":"499","line":94,"column":43,"nodeType":"407","messageId":"408","endLine":94,"endColumn":48},{"ruleId":"405","severity":1,"message":"500","line":4,"column":29,"nodeType":"407","messageId":"408","endLine":4,"endColumn":41},{"ruleId":"405","severity":1,"message":"501","line":4,"column":43,"nodeType":"407","messageId":"408","endLine":4,"endColumn":56},{"ruleId":"405","severity":1,"message":"498","line":67,"column":15,"nodeType":"407","messageId":"408","endLine":67,"endColumn":20},{"ruleId":"405","severity":1,"message":"495","line":2,"column":8,"nodeType":"407","messageId":"408","endLine":2,"endColumn":13},{"ruleId":"405","severity":1,"message":"502","line":3,"column":8,"nodeType":"407","messageId":"408","endLine":3,"endColumn":14},{"ruleId":"405","severity":1,"message":"490","line":16,"column":21,"nodeType":"407","messageId":"408","endLine":16,"endColumn":25},{"ruleId":"405","severity":1,"message":"498","line":27,"column":15,"nodeType":"407","messageId":"408","endLine":27,"endColumn":20},{"ruleId":"405","severity":1,"message":"485","line":2,"column":26,"nodeType":"407","messageId":"408","endLine":2,"endColumn":31},{"ruleId":"405","severity":1,"message":"502","line":4,"column":8,"nodeType":"407","messageId":"408","endLine":4,"endColumn":14},{"ruleId":"405","severity":1,"message":"503","line":5,"column":10,"nodeType":"407","messageId":"408","endLine":5,"endColumn":20},{"ruleId":"405","severity":1,"message":"495","line":6,"column":8,"nodeType":"407","messageId":"408","endLine":6,"endColumn":13},{"ruleId":"405","severity":1,"message":"496","line":76,"column":30,"nodeType":"407","messageId":"408","endLine":76,"endColumn":38},{"ruleId":"405","severity":1,"message":"497","line":76,"column":40,"nodeType":"407","messageId":"408","endLine":76,"endColumn":51},{"ruleId":"405","severity":1,"message":"504","line":76,"column":53,"nodeType":"407","messageId":"408","endLine":76,"endColumn":65},{"ruleId":"405","severity":1,"message":"505","line":76,"column":67,"nodeType":"407","messageId":"408","endLine":76,"endColumn":76},{"ruleId":"405","severity":1,"message":"498","line":77,"column":15,"nodeType":"407","messageId":"408","endLine":77,"endColumn":20},{"ruleId":"405","severity":1,"message":"490","line":77,"column":22,"nodeType":"407","messageId":"408","endLine":77,"endColumn":26},{"ruleId":"405","severity":1,"message":"506","line":79,"column":24,"nodeType":"407","messageId":"408","endLine":79,"endColumn":32},{"ruleId":"405","severity":1,"message":"493","line":2,"column":54,"nodeType":"407","messageId":"408","endLine":2,"endColumn":63},{"ruleId":"405","severity":1,"message":"494","line":2,"column":65,"nodeType":"407","messageId":"408","endLine":2,"endColumn":70},{"ruleId":"405","severity":1,"message":"489","line":11,"column":9,"nodeType":"407","messageId":"408","endLine":11,"endColumn":39},{"ruleId":"507","severity":1,"message":"508","line":21,"column":5,"nodeType":"509","messageId":"510","endLine":21,"endColumn":42},{"ruleId":"405","severity":1,"message":"511","line":46,"column":10,"nodeType":"407","messageId":"408","endLine":46,"endColumn":17},{"ruleId":"405","severity":1,"message":"512","line":46,"column":18,"nodeType":"407","messageId":"408","endLine":46,"endColumn":28},{"ruleId":"405","severity":1,"message":"513","line":47,"column":17,"nodeType":"407","messageId":"408","endLine":47,"endColumn":26},{"ruleId":"405","severity":1,"message":"514","line":50,"column":10,"nodeType":"407","messageId":"408","endLine":50,"endColumn":16},{"ruleId":"405","severity":1,"message":"515","line":50,"column":17,"nodeType":"407","messageId":"408","endLine":50,"endColumn":26},{"ruleId":"405","severity":1,"message":"516","line":51,"column":10,"nodeType":"407","messageId":"408","endLine":51,"endColumn":18},{"ruleId":"405","severity":1,"message":"517","line":51,"column":19,"nodeType":"407","messageId":"408","endLine":51,"endColumn":30},{"ruleId":"405","severity":1,"message":"518","line":52,"column":27,"nodeType":"407","messageId":"408","endLine":52,"endColumn":46},"no-native-reassign",["519"],"no-negated-in-lhs",["520"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Route' is defined but never used.","'Router' is defined but never used.","'t' is assigned a value but never used.","'Redirect' is defined but never used.","'adminActions' is defined but never used.","'apiService' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Nav' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Progress' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'ListGroup' is defined but never used.","'ListGroupItem' is defined but never used.","'AppSwitch' is defined but never used.","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'Badge' is defined but never used.","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'token' is assigned a value but never used.","'infosetting' is assigned a value but never used.","'Drivers' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous function","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'x'.","ArrowFunctionExpression","unsafeRefs","'getBadge' is assigned a value but never used.","'Widget03' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","'makeSocialBoxData' is assigned a value but never used.","'socialChartOpts' is assigned a value but never used.","'dropdownOpen' is assigned a value but never used.","'setDropDownOpen' is assigned a value but never used.","'setRegiseteredUserCounter' is assigned a value but never used.","'setRegisteredUserData' is assigned a value but never used.","'setActiveUserCounter' is assigned a value but never used.","'radioSelected' is assigned a value but never used.","'setRadioSelected' is assigned a value but never used.","'setActiveUserOptions' is assigned a value but never used.","'setRegisteredUserOptions' is assigned a value but never used.","'setVerifiedUserData' is assigned a value but never used.","'setRideCounter' is assigned a value but never used.","'setUserGroupData' is assigned a value but never used.","'setVerifiedUserCounter' is assigned a value but never used.","'setVerifiedUserOptions' is assigned a value but never used.","'setClientData' is assigned a value but never used.","'setActiveUserData' is assigned a value but never used.","'setRideData' is assigned a value but never used.","'setRideOptions' is assigned a value but never used.","'setClientCounter' is assigned a value but never used.","'setClientAppointmentCounter' is assigned a value but never used.","'setClientAppointmentData' is assigned a value but never used.","'setClientTaskCounter' is assigned a value but never used.","'setClientTaskData' is assigned a value but never used.","'setUserGroupCounter' is assigned a value but never used.","'toast' is defined but never used.","'ToastContainer' is defined but never used.",["519"],["520"],"'userCustomNotificationEditLink' is assigned a value but never used.","'name' is assigned a value but never used.","'userCustomNotificationList' is assigned a value but never used.","'Table' is defined but never used.","'FormGroup' is defined but never used.","'Input' is defined but never used.","'Axios' is defined but never used.","'disabled' is assigned a value but never used.","'placeholder' is assigned a value but never used.","'value' is assigned a value but never used.","'style' is assigned a value but never used.","'withScriptjs' is defined but never used.","'withGoogleMap' is defined but never used.","'config' is defined but never used.","'authHeader' is defined but never used.","'displayfield' is assigned a value but never used.","'entityAPI' is assigned a value but never used.","'fetching' is assigned a value but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'setDriver' is assigned a value but never used.","'status' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'verified' is assigned a value but never used.","'setVarified' is assigned a value but never used.","'setActivePagination' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
